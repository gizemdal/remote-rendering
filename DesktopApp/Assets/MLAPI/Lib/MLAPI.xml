<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MLAPI</name>
    </assembly>
    <members>
        <member name="T:MLAPI.Collections.FixedQueue`1">
            <summary>
            Queue with a fixed size
            </summary>
            <typeparam name="T">The type of the queue</typeparam>
        </member>
        <member name="P:MLAPI.Collections.FixedQueue`1.Count">
            <summary>
            The amount of enqueued objects
            </summary>
        </member>
        <member name="P:MLAPI.Collections.FixedQueue`1.Item(System.Int32)">
            <summary>
            Gets the element at a given virtual index
            </summary>
            <param name="index">The virtual index to get the item from</param>
            <returns>The element at the virtual index</returns>
        </member>
        <member name="M:MLAPI.Collections.FixedQueue`1.#ctor(System.Int32)">
            <summary>
            Creates a new FixedQueue with a given size
            </summary>
            <param name="maxSize">The size of the queue</param>
        </member>
        <member name="M:MLAPI.Collections.FixedQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an object
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Collections.FixedQueue`1.Dequeue">
            <summary>
            Dequeues an object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Collections.FixedQueue`1.ElementAt(System.Int32)">
            <summary>
            Gets the element at a given virtual index
            </summary>
            <param name="index">The virtual index to get the item from</param>
            <returns>The element at the virtual index</returns>
        </member>
        <member name="T:MLAPI.Configuration.HashSize">
            <summary>
            Represents the length of a var int encoded hash
            Note that the HashSize does not say anything about the actual final output due to the var int encoding
            It just says how many bytes the maximum will be
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.HashSize.VarIntTwoBytes">
            <summary>
            Two byte hash
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.HashSize.VarIntFourBytes">
            <summary>
            Four byte hash
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.HashSize.VarIntEightBytes">
            <summary>
            Eight byte hash
            </summary>
        </member>
        <member name="T:MLAPI.Configuration.MLAPIConstants">
            <summary>
            A static class containing MLAPI constants
            </summary>
        </member>
        <member name="T:MLAPI.Configuration.NetworkConfig">
            <summary>
            The configuration object used to start server, client and hosts
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ProtocolVersion">
            <summary>
            The protocol version. Different versions doesn't talk to each other.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.NetworkTransport">
            <summary>
            The transport hosts the sever uses
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.RegisteredScenes">
            <summary>
            A list of SceneNames that can be used during networked games.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.AllowRuntimeSceneChanges">
            <summary>
            Whether or not runtime scene changes should be allowed and expected.
            If this is true, clients with different initial configurations will not work together.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.NetworkedPrefabs">
            <summary>
            A list of spawnable prefabs
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.PlayerPrefabHash">
            <summary>
            The default player prefab
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.CreatePlayerPrefab">
            <summary>
            Whether or not a player object should be created by default. This value can be overriden on a case by case basis with ConnectionApproval.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ReceiveTickrate">
            <summary>
            Amount of times per second the receive queue is emptied and all messages inside are processed.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.MaxReceiveEventsPerTickRate">
            <summary>
            The max amount of messages to process per ReceiveTickrate. This is to prevent flooding.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EventTickrate">
            <summary>
            The amount of times per second internal frame events will occur, examples include SyncedVar send checking.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.MaxObjectUpdatesPerTick">
            <summary>
            The maximum amount of NetworkedObject's to process per tick.
            This is useful to prevent the MLAPI from hanging a frame
            Set this to less than or equal to 0 for unlimited
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ClientConnectionBufferTimeout">
            <summary>
            The amount of seconds to wait for handshake to complete before timing out a client
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ConnectionApproval">
            <summary>
            Whether or not to use connection approval
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ConnectionData">
            <summary>
            The data to send during connection which can be used to decide on if a client should get accepted
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.SecondsHistory">
            <summary>
            The amount of seconds to keep a lag compensation position history
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableTimeResync">
            <summary>
            If your logic uses the NetworkedTime, this should probably be turned off. If however it's needed to maximize accuracy, this is recommended to be turned on
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.TimeResyncInterval">
            <summary>
            If time resync is turned on, this specifies the interval between syncs in seconds.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableNetworkedVar">
            <summary>
            Whether or not to enable the NetworkedVar system. This system runs in the Update loop and will degrade performance, but it can be a huge convenience.
            Only turn it off if you have no need for the NetworkedVar system.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnsureNetworkedVarLengthSafety">
            <summary>
            Whether or not to ensure that NetworkedVars can be read even if a client accidentally writes where its not allowed to. This costs some CPU and bandwdith.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableSceneManagement">
            <summary>
            Enables scene management. This will allow network scene switches and automatic scene diff corrections upon connect.
            SoftSynced scene objects wont work with this disabled. That means that disabling SceneManagement also enables PrefabSync.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ForceSamePrefabs">
            <summary>
            Whether or not the MLAPI should check for differences in the prefabs at connection.
            If you dynamically add prefabs at runtime, turn this OFF
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.UsePrefabSync">
            <summary>
            If true, all NetworkedObject's need to be prefabs and all scene objects will be replaced on server side which causes all serialization to be lost. Useful for multi project setups
            If false, Only non scene objects have to be prefabs. Scene objects will be matched using their PrefabInstanceId which can be precomputed globally for a scene at build time. Useful for single projects
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.RecycleNetworkIds">
            <summary>
            If true, NetworkIds will be reused after the NetworkIdRecycleDelay.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.NetworkIdRecycleDelay">
            <summary>
            The amount of seconds a NetworkId has to be unused in order for it to be reused.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.RpcHashSize">
            <summary>
            Decides how many bytes to use for Rpc messaging. Leave this to 2 bytes unless you are facing hash collisions
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.LoadSceneTimeOut">
            <summary>
            The amount of seconds to wait on all clients to load requested scene before the SwitchSceneProgress onComplete callback, that waits for all clients to complete loading, is called anyway.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableMessageBuffering">
            <summary>
            Whether or not message buffering should be enabled. This will resolve most out of order messages during spawn.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.MessageBufferTimeout">
            <summary>
            The amount of time a message should be buffered for without being consumed. If it is not consumed within this time, it will be dropped.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableNetworkLogs">
            <summary>
            Whether or not to enable network logs.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.EnableEncryption">
            <summary>
            Whether or not to enable the ECDHE key exchange to allow for encryption and authentication of messages
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.SignKeyExchange">
            <summary>
            Whether or not to enable signed diffie hellman key exchange.
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkConfig.ServerBase64PfxCertificate">
            <summary>
            Pfx file in base64 encoding containing private and public key
            </summary>
        </member>
        <member name="P:MLAPI.Configuration.NetworkConfig.ServerX509Certificate">
            <summary>
            Gets the currently in use certificate
            </summary>
        </member>
        <member name="P:MLAPI.Configuration.NetworkConfig.ServerX509CertificateBytes">
            <summary>
            Gets the cached binary representation of the server certificate that's used for handshaking
            </summary>
        </member>
        <member name="M:MLAPI.Configuration.NetworkConfig.ToBase64">
            <summary>
            Returns a base64 encoded version of the config
            </summary>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Configuration.NetworkConfig.FromBase64(System.String)">
            <summary>
            Sets the NetworkConfig data with that from a base64 encoded version
            </summary>
            <param name="base64">The base64 encoded version</param>
        </member>
        <member name="M:MLAPI.Configuration.NetworkConfig.GetConfig(System.Boolean)">
            <summary>
            Gets a SHA256 hash of parts of the NetworkingConfiguration instance
            </summary>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Configuration.NetworkConfig.CompareConfig(System.UInt64)">
            <summary>
            Compares a SHA256 hash with the current NetworkingConfiguration instances hash
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:MLAPI.Configuration.NetworkedPrefab">
            <summary>
            A class that represents a NetworkedPrefab
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkedPrefab.Prefab">
            <summary>
            The gameobject of the prefab
            </summary>
        </member>
        <member name="F:MLAPI.Configuration.NetworkedPrefab.PlayerPrefab">
            <summary>
            Whether or not this is a playerPrefab
            </summary>
        </member>
        <member name="T:MLAPI.Connection.NetworkedClient">
            <summary>
            A NetworkedClient
            </summary>
        </member>
        <member name="F:MLAPI.Connection.NetworkedClient.ClientId">
            <summary>
            The Id of the NetworkedClient
            </summary>
        </member>
        <member name="F:MLAPI.Connection.NetworkedClient.PlayerObject">
            <summary>
            The PlayerObject of the Client
            </summary>
        </member>
        <member name="F:MLAPI.Connection.NetworkedClient.OwnedObjects">
            <summary>
            The NetworkedObject's owned by this Client
            </summary>
        </member>
        <member name="F:MLAPI.Connection.NetworkedClient.AesKey">
            <summary>
            The encryption key used for this client
            </summary>
        </member>
        <member name="T:MLAPI.Connection.PendingClient">
            <summary>
            A class representing a client that is currently in the process of connecting
            </summary>
        </member>
        <member name="F:MLAPI.Connection.PendingClient.ClientId">
            <summary>
            The ClientId of the client
            </summary>
        </member>
        <member name="F:MLAPI.Connection.PendingClient.AesKey">
            <summary>
            The current AesKey
            </summary>
        </member>
        <member name="F:MLAPI.Connection.PendingClient.ConnectionState">
            <summary>
            The state of the connection process for the client
            </summary>
        </member>
        <member name="T:MLAPI.Connection.PendingClient.State">
            <summary>
            The states of a connection
            </summary>
        </member>
        <member name="F:MLAPI.Connection.PendingClient.State.PendingHail">
            <summary>
            Client is in the process of doing the hail handshake
            </summary>
        </member>
        <member name="F:MLAPI.Connection.PendingClient.State.PendingConnection">
            <summary>
            Client is in the process of doing the connection handshake
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedBehaviour">
            <summary>
            The base class to override to write networked code. Inherits MonoBehaviour
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isLocalPlayer">
            <summary>
            Gets if the object is the the personal clients player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsLocalPlayer">
            <summary>
            Gets if the object is the the personal clients player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isOwner">
            <summary>
            Gets if the object is owned by the local player or if the object is the local player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsOwner">
            <summary>
            Gets if the object is owned by the local player or if the object is the local player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isServer">
            <summary>
            Gets if we are executing as server
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsServer">
            <summary>
            Gets if we are executing as server
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isClient">
            <summary>
            Gets if we are executing as client
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsClient">
            <summary>
            Gets if we are executing as client
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isHost">
            <summary>
            Gets if we are executing as Host, I.E Server and Client
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsHost">
            <summary>
            Gets if we are executing as Host, I.E Server and Client
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.isOwnedByServer">
            <summary>
            Gets Whether or not the object has a owner
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.IsOwnedByServer">
            <summary>
            Gets Whether or not the object has a owner
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.ExecutingRpcSender">
            <summary>
            Contains the sender of the currently executing RPC. Useful for the convenience RPC methods
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.networkedObject">
            <summary>
            Gets the NetworkedObject that owns this NetworkedBehaviour instance
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.NetworkedObject">
            <summary>
            Gets the NetworkedObject that owns this NetworkedBehaviour instance
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.HasNetworkedObject">
            <summary>
            Gets whether or not this NetworkedBehaviour instance has a NetworkedObject owner.
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.networkId">
            <summary>
            Gets the NetworkId of the NetworkedObject that owns the NetworkedBehaviour instance
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.NetworkId">
            <summary>
            Gets the NetworkId of the NetworkedObject that owns the NetworkedBehaviour instance
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedBehaviour.OwnerClientId">
            <summary>
            Gets the clientId that owns the NetworkedObject
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.NetworkStart">
            <summary>
            Gets called when message handlers are ready to be registered and the networking is setup
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.NetworkStart(System.IO.Stream)">
            <summary>
            Gets called when message handlers are ready to be registered and the networking is setup. Provides a Payload if it was provided
            </summary>
            <param name="stream">The stream containing the spawn payload</param>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.OnSyncVarUpdate">
            <summary>
            Gets called when SyncedVars gets updated
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.OnGainedOwnership">
            <summary>
            Gets called when the local client gains ownership of this object
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.OnLostOwnership">
            <summary>
            Gets called when we loose ownership of this object
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.GetBehaviourId">
            <summary>
            Gets behaviourId for this NetworkedBehaviour on this NetworkedObject
            </summary>
            <returns>The behaviourId for the current NetworkedBehaviour</returns>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.GetBehaviour(System.UInt16)">
            <summary>
            Returns a the NetworkedBehaviour with a given behaviourId for the current networkedObject
            </summary>
            <param name="id">The behaviourId to return</param>
            <returns>Returns NetworkedBehaviour with given behaviourId</returns>
        </member>
        <member name="M:MLAPI.NetworkedBehaviour.GetNetworkedObject(System.UInt64)">
            <summary>
            Gets the local instance of a object with a given NetworkId
            </summary>
            <param name="networkId"></param>
            <returns></returns>
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`1">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`2">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`3">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`4">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`5">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`6">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`7">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`8">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`9">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`10">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`11">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`12">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`13">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`14">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`15">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`16">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`17">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`18">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`19">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`20">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`21">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`22">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`23">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`24">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`25">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`26">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`27">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`28">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`29">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`30">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`31">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.RpcMethod`32">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`1">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`2">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`3">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`4">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`5">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`6">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`7">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`8">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`9">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`10">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`11">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`12">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`13">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`14">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`15">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`16">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`17">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`18">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`19">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`20">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`21">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`22">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`23">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`24">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`25">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`26">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`27">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`28">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`29">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`30">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`31">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`32">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedBehaviour.ResponseRpcMethod`33">
            <exclude />
        </member>
        <member name="T:MLAPI.NetworkedObject">
            <summary>
            A component used to identify that a GameObject is networked
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.NetworkId">
            <summary>
            Gets the unique ID of this object that is synced across the network
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.OwnerClientId">
            <summary>
            Gets the clientId of the owner of this NetworkedObject
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedObject.NetworkedInstanceId">
            <summary>
            InstanceId is the id that is unique to the object and scene for a scene object when UsePrefabSync is false.
            If UsePrefabSync is true or if it's used on non scene objects, this has no effect.
            Should not be set manually
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedObject.PrefabHash">
            <summary>
            The Prefab unique hash. This should not be set my the user but rather changed by editing the PrefabHashGenerator.
            It has to be the same for all instances of a prefab
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedObject.PrefabHashGenerator">
            <summary>
            The generator used to change the PrefabHash. This should be set the same for all instances of a prefab.
            It has to be unique in relation to other prefabs
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedObject.AlwaysReplicateAsRoot">
            <summary>
            If true, the object will always be replicated as root on clients and the parent will be ignored.
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.isPlayerObject">
            <summary>
            Gets if this object is a player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsPlayerObject">
            <summary>
            Gets if this object is a player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.isLocalPlayer">
            <summary>
            Gets if the object is the the personal clients player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsLocalPlayer">
            <summary>
            Gets if the object is the the personal clients player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.isOwner">
            <summary>
            Gets if the object is owned by the local player or if the object is the local player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsOwner">
            <summary>
            Gets if the object is owned by the local player or if the object is the local player object
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.isOwnedByServer">
            <summary>
            Gets Whether or not the object is owned by anyone
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsOwnedByServer">
            <summary>
            Gets Whether or not the object is owned by anyone
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.isSpawned">
            <summary>
            Gets if the object has yet been spawned across the network
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsSpawned">
            <summary>
            Gets if the object has yet been spawned across the network
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.IsSceneObject">
            <summary>
            Gets if the object is a SceneObject, null if it's not yet spawned but is a scene object.
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedObject.DestroyWithScene">
            <summary>
            Gets whether or not the object should be automatically removed when the scene is unloaded.
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedObject.VisibilityDelegate">
            <summary>
            Delegate type for checking visibility
            </summary>
            <param name="clientId">The clientId to check visibility for</param>
        </member>
        <member name="F:MLAPI.NetworkedObject.CheckObjectVisibility">
            <summary>
            Delegate invoked when the MLAPI needs to know if the object should be visible to a client, if null it will assume true
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedObject.SpawnDelegate">
            <summary>
            Delegate type for checking spawn options
            </summary>
            <param name="clientId">The clientId to check spawn options for</param>
        </member>
        <member name="F:MLAPI.NetworkedObject.IncludeTransformWhenSpawning">
            <summary>
            Delegate invoked when the MLAPI needs to know if it should include the transform when spawning the object, if null it will assume true
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedObject.DontDestroyWithOwner">
            <summary>
            Whether or not to destroy this object if it's owner is destroyed.
            If false, the objects ownership will be given to the server.
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedObject.GetObservers">
            <summary>
            Returns Observers enumerator
            </summary>
            <returns>Observers enumerator</returns>
        </member>
        <member name="M:MLAPI.NetworkedObject.IsNetworkVisibleTo(System.UInt64)">
            <summary>
            Whether or not this object is visible to a specific client
            </summary>
            <param name="clientId">The clientId of the client</param>
            <returns>True if the client knows about the object</returns>
        </member>
        <member name="M:MLAPI.NetworkedObject.NetworkShow(System.UInt64,System.IO.Stream)">
            <summary>
            Shows a previously hidden object to a client
            </summary>
            <param name="clientId">The client to show the object to</param>
            <param name="payload">An optional payload to send as part of the spawn</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.NetworkShow(System.Collections.Generic.List{MLAPI.NetworkedObject},System.UInt64,System.IO.Stream)">
            <summary>
            Shows a list of previously hidden objects to a client
            </summary>
            <param name="networkedObjects">The objects to show</param>
            <param name="clientId">The client to show the objects to</param>
            <param name="payload">An optional payload to send as part of the spawns</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.NetworkHide(System.UInt64)">
            <summary>
            Hides a object from a specific client
            </summary>
            <param name="clientId">The client to hide the object for</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.NetworkHide(System.Collections.Generic.List{MLAPI.NetworkedObject},System.UInt64)">
            <summary>
            Hides a list of objects from a client
            </summary>
            <param name="networkedObjects">The objects to hide</param>
            <param name="clientId">The client to hide the objects from</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.Spawn(System.IO.Stream,System.Boolean)">
            <summary>
            Spawns this GameObject across the network. Can only be called from the Server
            </summary>
            <param name="spawnPayload">The writer containing the spawn payload</param>
            <param name="destroyWithScene">Should the object be destroyd when the scene is changed</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.UnSpawn">
            <summary>
            Unspawns this GameObject and destroys it for other clients. This should be used if the object should be kept on the server
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedObject.SpawnWithOwnership(System.UInt64,System.IO.Stream,System.Boolean)">
            <summary>
            Spawns an object across the network with a given owner. Can only be called from server
            </summary>
            <param name="clientId">The clientId to own the object</param>
            <param name="spawnPayload">The writer containing the spawn payload</param>
            <param name="destroyWithScene">Should the object be destroyd when the scene is changed</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.SpawnAsPlayerObject(System.UInt64,System.IO.Stream,System.Boolean)">
            <summary>
            Spawns an object across the network and makes it the player object for the given client
            </summary>
            <param name="clientId">The clientId whos player object this is</param>
            <param name="spawnPayload">The writer containing the spawn payload</param>
            <param name="destroyWithScene">Should the object be destroyd when the scene is changed</param>
        </member>
        <member name="M:MLAPI.NetworkedObject.RemoveOwnership">
            <summary>
            Removes all ownership of an object from any client. Can only be called from server
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedObject.ChangeOwnership(System.UInt64)">
            <summary>
            Changes the owner of the object. Can only be called from server
            </summary>
            <param name="newOwnerClientId">The new owner clientId</param>
        </member>
        <member name="T:MLAPI.NetworkingManager">
            <summary>
            The main component of the library
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.NetworkTime">
            <summary>
            A synchronized time, represents the time in seconds since the server application started. Is replicated across all clients
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.DontDestroy">
            <summary>
            Gets or sets if the NetworkingManager should be marked as DontDestroyOnLoad
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.RunInBackground">
            <summary>
            Gets or sets if the application should be set to run in background
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.LogLevel">
            <summary>
            The log level to use
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.singleton">
            <summary>
            The singleton instance of the NetworkingManager
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.Singleton">
            <summary>
            The singleton instance of the NetworkingManager
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.ServerClientId">
            <summary>
            Gets the networkId of the server
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.LocalClientId">
            <summary>
            The clientId the server calls the local client by, only valid for clients
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.ConnectedClients">
            <summary>
            Gets a dictionary of connected clients and their clientId keys. This is only populated on the server.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.ConnectedClientsList">
            <summary>
            Gets a list of connected clients. This is only populated on the server.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.PendingClients">
            <summary>
            Gets a dictionary of the clients that have been accepted by the transport but are still pending by the MLAPI. This is only populated on the server.
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.isServer">
            <summary>
            Gets Whether or not a server is running
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.IsServer">
            <summary>
            Gets Whether or not a server is running
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.isClient">
            <summary>
            Gets Whether or not a client is running
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.IsClient">
            <summary>
            Gets Whether or not a client is running
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.isHost">
            <summary>
            Gets if we are running as host
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.IsHost">
            <summary>
            Gets if we are running as host
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.isListening">
            <summary>
            Gets Whether or not we are listening for connections
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.IsListening">
            <summary>
            Gets Whether or not we are listening for connections
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.isConnectedClients">
            <summary>
            Gets if we are connected as a client
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.IsConnectedClient">
            <summary>
            Gets if we are connected as a client
            </summary>
        </member>
        <member name="E:MLAPI.NetworkingManager.OnClientConnectedCallback">
            <summary>
            The callback to invoke once a client connects. This callback is only ran on the server and on the local client that connects.
            </summary>
        </member>
        <member name="E:MLAPI.NetworkingManager.OnClientDisconnectCallback">
            <summary>
            The callback to invoke when a client disconnects. This callback is only ran on the server and on the local client that disconnects.
            </summary>
        </member>
        <member name="E:MLAPI.NetworkingManager.OnServerStarted">
            <summary>
            The callback to invoke once the server is ready
            </summary>
        </member>
        <member name="T:MLAPI.NetworkingManager.ConnectionApprovedDelegate">
            <summary>
            Delegate type called when connection has been approved. This only has to be set on the server.
            </summary>
            <param name="createPlayerObject">If true, a player object will be created. Otherwise the client will have no object.</param>
            <param name="playerPrefabHash">The prefabHash to use for the client. If createPlayerObject is false, this is ignored. If playerPrefabHash is null, the default player prefab is used.</param>
            <param name="approved">Whether or not the client was approved</param>
            <param name="position">The position to spawn the client at. If null, the prefab position is used.</param>
            <param name="rotation">The rotation to spawn the client with. If null, the prefab position is used.</param>
        </member>
        <member name="E:MLAPI.NetworkingManager.ConnectionApprovalCallback">
            <summary>
            The callback to invoke during connection approval
            </summary>
        </member>
        <member name="F:MLAPI.NetworkingManager.NetworkConfig">
            <summary>
            The current NetworkingConfiguration
            </summary>
        </member>
        <member name="P:MLAPI.NetworkingManager.ConnectedHostname">
            <summary>
            The current hostname we are connected to, used to validate certificate
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.SendCustomMessage(System.Collections.Generic.List{System.UInt64},MLAPI.Serialization.BitStream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends unnamed message to a list of clients
            </summary>
            <param name="clientIds">The clients to send to, sends to everyone if null</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel to send the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="M:MLAPI.NetworkingManager.SendCustomMessage(System.UInt64,MLAPI.Serialization.BitStream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends a unnamed message to a specific client
            </summary>
            <param name="clientId">The client to send the message to</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel tos end the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="M:MLAPI.NetworkingManager.StartServer">
            <summary>
            Starts a server
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.StartClient">
            <summary>
            Starts a client
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.StopServer">
            <summary>
            Stops the running server
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.StopHost">
            <summary>
            Stops the running host
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.StopClient">
            <summary>
            Stops the running client
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.StartHost(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Nullable{System.Boolean},System.Nullable{System.UInt64},System.IO.Stream)">
            <summary>
            Starts a Host
            </summary>
        </member>
        <member name="M:MLAPI.NetworkingManager.DisconnectClient(System.UInt64)">
            <summary>
            Disconnects the remote client.
            </summary>
            <param name="clientId">The ClientId to disconnect</param>
        </member>
        <member name="T:MLAPI.Exceptions.NetworkConfigurationException">
            <summary>
            Exception thrown when the operation can only be done on the server
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NetworkConfigurationException.#ctor">
            <summary>
            Constructs a NetworkConfigurationException
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NetworkConfigurationException.#ctor(System.String)">
            <summary>
            Constructs a NetworkConfigurationException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MLAPI.Exceptions.NetworkConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a NetworkConfigurationException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:MLAPI.Exceptions.NotListeningException">
            <summary>
            Exception thrown when the operation require NetworkingManager to be listening.
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NotListeningException.#ctor">
            <summary>
            Constructs a NotListeningException
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NotListeningException.#ctor(System.String)">
            <summary>
            Constructs a NotListeningException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MLAPI.Exceptions.NotListeningException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a NotListeningException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:MLAPI.Exceptions.NotServerException">
            <summary>
            Exception thrown when the operation can only be done on the server
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NotServerException.#ctor">
            <summary>
            Constructs a NotServerException
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.NotServerException.#ctor(System.String)">
            <summary>
            Constructs a NotServerException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MLAPI.Exceptions.NotServerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a NotServerException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:MLAPI.Exceptions.SpawnStateException">
            <summary>
            Exception thrown when an object is not yet spawned
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.SpawnStateException.#ctor">
            <summary>
            Constructs a SpawnStateException
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.SpawnStateException.#ctor(System.String)">
            <summary>
            Constructs a SpawnStateException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MLAPI.Exceptions.SpawnStateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a SpawnStateException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:MLAPI.Exceptions.VisibilityChangeException">
            <summary>
            Exception thrown when a visibility change fails
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.VisibilityChangeException.#ctor">
            <summary>
            Constructs a VisibilityChangeException
            </summary>
        </member>
        <member name="M:MLAPI.Exceptions.VisibilityChangeException.#ctor(System.String)">
            <summary>
            Constructs a VisibilityChangeException with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MLAPI.Exceptions.VisibilityChangeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a VisibilityChangeException with a message and a inner exception
            </summary>
            <param name="message">The exception message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:MLAPI.Hashing.HashCode">
            <summary>
            Provides extension methods for getting hashes
            </summary>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash16(System.String)">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1 32 bit xor folded to 16 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="txt">Text.</param>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash32(System.String)">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1 32 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="txt">Text.</param>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash64(System.String)">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1  64 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="txt">Text.</param>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash16(System.Byte[])">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1 32 bit xor folded to 16 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="bytes">Text.</param>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash32(System.Byte[])">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1 32 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="bytes">Text.</param>
        </member>
        <member name="M:MLAPI.Hashing.HashCode.GetStableHash64(System.Byte[])">
            <summary>
            non cryptographic stable hash code,  
            it will always return the same hash for the same
            string.  
            
            This is simply an implementation of FNV-1  64 bit
            https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <returns>The stable hash32.</returns>
            <param name="bytes">Text.</param>
        </member>
        <member name="T:MLAPI.LagCompensation.LagCompensationManager">
            <summary>
            The main class for controlling lag compensation
            </summary>
        </member>
        <member name="F:MLAPI.LagCompensation.LagCompensationManager.SimulationObjects">
            <summary>
            Simulation objects
            </summary>
        </member>
        <member name="P:MLAPI.LagCompensation.LagCompensationManager.simulationObjects">
            <summary>
            Simulation objects
            </summary>
        </member>
        <member name="M:MLAPI.LagCompensation.LagCompensationManager.Simulate(System.Single,System.Action)">
            <summary>
            Turns time back a given amount of seconds, invokes an action and turns it back
            </summary>
            <param name="secondsAgo">The amount of seconds</param>
            <param name="action">The action to invoke when time is turned back</param>
        </member>
        <member name="M:MLAPI.LagCompensation.LagCompensationManager.Simulate(System.Single,System.Collections.Generic.IList{MLAPI.LagCompensation.TrackedObject},System.Action)">
            <summary>
            Turns time back a given amount of second on the given objects, invokes an action and turns it back
            </summary>
            <param name="secondsAgo">The amount of seconds</param>
            <param name="simulatedObjects">The object to simulate back in time</param>
            <param name="action">The action to invoke when time is turned back</param>
        </member>
        <member name="M:MLAPI.LagCompensation.LagCompensationManager.Simulate(System.UInt64,System.Action)">
            <summary>
            Turns time back a given amount of seconds, invokes an action and turns it back. The time is based on the estimated RTT of a clientId
            </summary>
            <param name="clientId">The clientId's RTT to use</param>
            <param name="action">The action to invoke when time is turned back</param>
        </member>
        <member name="T:MLAPI.LagCompensation.TrackedObject">
            <summary>
            A component used for lag compensation. Each object with this component will get tracked
            </summary>
        </member>
        <member name="P:MLAPI.LagCompensation.TrackedObject.TotalPoints">
            <summary>
            Gets the total amount of points stored in the component
            </summary>
        </member>
        <member name="P:MLAPI.LagCompensation.TrackedObject.AvgTimeBetweenPointsMs">
            <summary>
            Gets the average amount of time between the points in miliseconds
            </summary>
        </member>
        <member name="P:MLAPI.LagCompensation.TrackedObject.TotalTimeHistory">
            <summary>
            Gets the total time history we have for this object
            </summary>
        </member>
        <member name="T:MLAPI.Logging.LogLevel">
            <summary>
            Log level
            </summary>
        </member>
        <member name="F:MLAPI.Logging.LogLevel.Developer">
            <summary>
            Developer logging level, most verbose
            </summary>
        </member>
        <member name="F:MLAPI.Logging.LogLevel.Normal">
            <summary>
            Normal logging level, medium verbose
            </summary>
        </member>
        <member name="F:MLAPI.Logging.LogLevel.Error">
            <summary>
            Error logging level, very quiet
            </summary>
        </member>
        <member name="F:MLAPI.Logging.LogLevel.Nothing">
            <summary>
            Nothing logging level, no logging will be done
            </summary>
        </member>
        <member name="T:MLAPI.Logging.NetworkLog">
            <summary>
            Helper class for logging
            </summary>
        </member>
        <member name="P:MLAPI.Logging.NetworkLog.CurrentLogLevel">
            <summary>
            Gets the current log level.
            </summary>
            <value>The current log level.</value>
        </member>
        <member name="M:MLAPI.Logging.NetworkLog.LogInfoServer(System.String)">
            <summary>
            Logs an info log locally and on the server if possible.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MLAPI.Logging.NetworkLog.LogWarningServer(System.String)">
            <summary>
            Logs a warning log locally and on the server if possible.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MLAPI.Logging.NetworkLog.LogErrorServer(System.String)">
            <summary>
            Logs an error log locally and on the server if possible.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="T:MLAPI.Messaging.ClientRPCAttribute">
            <summary>
            Attribute used on methods to me marked as ClientRPC
            ClientRPC methods can be requested from the server and will execute on a client
            Remember that a host is a server and a client
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.CustomMessagingManager">
            <summary>
            The manager class to manage custom messages, note that this is different from the NetworkingManager custom messages.
            These are named and are much easier to use.
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.CustomMessagingManager.UnnamedMessageDelegate">
            <summary>
            Delegate used for incoming unnamed messages
            </summary>
            <param name="clientId">The clientId that sent the message</param>
            <param name="stream">The stream containing the message data</param>
        </member>
        <member name="E:MLAPI.Messaging.CustomMessagingManager.OnUnnamedMessage">
            <summary>
            Event invoked when unnamed messages arrive
            </summary>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.SendUnnamedMessage(System.Collections.Generic.List{System.UInt64},MLAPI.Serialization.BitStream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends unnamed message to a list of clients
            </summary>
            <param name="clientIds">The clients to send to, sends to everyone if null</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel to send the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.SendUnnamedMessage(System.UInt64,MLAPI.Serialization.BitStream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends a unnamed message to a specific client
            </summary>
            <param name="clientId">The client to send the message to</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel tos end the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="T:MLAPI.Messaging.CustomMessagingManager.HandleNamedMessageDelegate">
            <summary>
            Delegate used to handle named messages
            </summary>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.RegisterNamedMessageHandler(System.String,MLAPI.Messaging.CustomMessagingManager.HandleNamedMessageDelegate)">
            <summary>
            Registers a named message handler delegate.
            </summary>
            <param name="name">Name of the message.</param>
            <param name="callback">The callback to run when a named message is received.</param>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.UnregisterNamedMessageHandler(System.String)">
            <summary>
            Unregisters a named message handler.
            </summary>
            <param name="name">The name of the message.</param>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.SendNamedMessage(System.String,System.UInt64,System.IO.Stream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends a named message
            </summary>
            <param name="name">The message name to send</param>
            <param name="clientId">The client to send the message to</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel to send the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="M:MLAPI.Messaging.CustomMessagingManager.SendNamedMessage(System.String,System.Collections.Generic.List{System.UInt64},System.IO.Stream,System.String,MLAPI.Security.SecuritySendFlags)">
            <summary>
            Sends the named message
            </summary>
            <param name="name">The message name to send</param>
            <param name="clientIds">The clients to send to, sends to everyone if null</param>
            <param name="stream">The message stream containing the data</param>
            <param name="channel">The channel to send the data on</param>
            <param name="security">The security settings to apply to the message</param>
        </member>
        <member name="T:MLAPI.Messaging.RPCAttribute">
            <summary>
            Generic supertype of Client and Server RPC Attributes.  Do not use directly.
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.RpcDelegate">
            <summary>
            Delegate definition for performance RPC's.
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.RpcResponse`1">
            <summary>
            The RpcResponse class exposed by the API. Represents a network Request/Response operation with a result
            </summary>
            <typeparam name="T">The result type</typeparam>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponse`1.Value">
            <summary>
            Gets the return value of the operation
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.RpcResponseBase">
            <summary>
            Abstract base class for RpcResponse
            </summary>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponseBase.Id">
            <summary>
            Unique ID for the Rpc Request and Response pair
            </summary>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponseBase.IsDone">
            <summary>
            Whether or not the operation is done. This does not mean it was successful. Check IsSuccessful for that
            This will be true both when the operation was successful and when a timeout occured
            </summary>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponseBase.IsSuccessful">
            <summary>
            Whether or not a valid result was received
            </summary>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponseBase.ClientId">
            <summary>
            The clientId which the Request/Response was done wit
            </summary>
        </member>
        <member name="P:MLAPI.Messaging.RpcResponseBase.Timeout">
            <summary>
            The amount of time to wait for the operation to complete
            </summary>
        </member>
        <member name="T:MLAPI.Messaging.ServerRPCAttribute">
            <summary>
            Attribute used on methods to me marked as ServerRPC
            ServerRPC methods can be requested from a client and will execute on the server
            Remember that a host is a server and a client
            </summary>
        </member>
        <member name="F:MLAPI.Messaging.ServerRPCAttribute.RequireOwnership">
            <summary>
            Whether or not the ServerRPC should only be run if executed by the owner of the object
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2">
            <summary>
            Event based networkedVar container for syncing Dictionaries
            </summary>
            <typeparam name="TKey">The type for the dictionary keys</typeparam>
            <typeparam name="TValue">The type for the dictionary values</typeparam>
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.LastSyncedTime">
            <summary>
            Gets the last time the variable was synced
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Settings">
            <summary>
            The settings for this container
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.OnDictionaryChangedDelegate">
            <summary>
            Delegate type for dictionary changed event
            </summary>
            <param name="changeEvent">Struct containing information about the change event</param>
        </member>
        <member name="E:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.OnDictionaryChanged">
            <summary>
            The callback to be invoked when the dictionary gets changed
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.#ctor">
            <summary>
            Creates a NetworkedDictionary with the default value and settings
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <summary>
            Creates a NetworkedDictionary with the default value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedDictionary</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a NetworkedDictionary with a custom value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedDictionary</param>
            <param name="value">The initial value to use for the NetworkedDictionary</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a NetworkedDictionary with a custom value and the default settings
            </summary>
            <param name="value">The initial value to use for the NetworkedDictionary</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.ResetDirty">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.GetChannel">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.ReadDelta(System.IO.Stream,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.ReadField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.SetNetworkedBehaviour(MLAPI.NetworkedBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.WriteDelta(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.WriteField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.CanClientWrite(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.CanClientRead(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.IsDirty">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2">
            <summary>
            Struct containing event information about changes to a NetworkedDictionary.
            </summary>
            <typeparam name="TKey">The type for the dictionary key that the event is about</typeparam>
            <typeparam name="TValue">The type for the dictionary value that the event is about</typeparam>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType">
            <summary>
            Enum representing the different operations available for triggering an event. 
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType.RemovePair">
            <summary>
            Remove pair
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.NetworkedListEventType.Value">
            <summary>
            Value changed
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.eventType">
            <summary>
            Enum representing the operation made to the dictionary.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.key">
            <summary>
            the key changed, added or removed if available.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedDictionaryEvent`2.value">
            <summary>
            The value changed, added or removed if available.
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedList`1">
            <summary>
            Event based networkedVar container for syncing Lists
            </summary>
            <typeparam name="T">The type for the list</typeparam>
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedList`1.LastSyncedTime">
            <summary>
            Gets the last time the variable was synced
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedList`1.Settings">
            <summary>
            The settings for this container
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedList`1.OnListChangedDelegate">
            <summary>
            Delegate type for list changed event
            </summary>
            <param name="changeEvent">Struct containing information about the change event</param>
        </member>
        <member name="E:MLAPI.NetworkedVar.Collections.NetworkedList`1.OnListChanged">
            <summary>
            The callback to be invoked when the list gets changed
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.#ctor">
            <summary>
            Creates a NetworkedList with the default value and settings
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <summary>
            Creates a NetworkedList with the default value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedList</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Collections.Generic.IList{`0})">
            <summary>
            Creates a NetworkedList with a custom value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedList</param>
            <param name="value">The initial value to use for the NetworkedList</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a NetworkedList with a custom value and the default settings
            </summary>
            <param name="value">The initial value to use for the NetworkedList</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.ResetDirty">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.GetChannel">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.CanClientWrite(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.CanClientRead(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.WriteDelta(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.WriteField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.ReadField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.ReadDelta(System.IO.Stream,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.SetNetworkedBehaviour(MLAPI.NetworkedBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.Collections.NetworkedList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:MLAPI.NetworkedVar.Collections.NetworkedList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1">
            <summary>
            Struct containing event information about changes to a NetworkedList.
            </summary>
            <typeparam name="T">The type for the list that the event is about</typeparam>
        </member>
        <member name="T:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType">
            <summary>
            Enum representing the different operations available for triggering an event. 
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.Add">
            <summary>
            Add
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.Insert">
            <summary>
            Insert
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.Remove">
            <summary>
            Remove
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.RemoveAt">
            <summary>
            Remove at
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.Value">
            <summary>
            Value changed
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.EventType.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.eventType">
            <summary>
            Enum representing the operation made to the list.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.value">
            <summary>
            The value changed, added or removed if available.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.Collections.NetworkedListEvent`1.index">
            <summary>
            the index changed, added or removed if available
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.INetworkedVar">
            <summary>
            Interface for networked value containers
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.GetChannel">
            <summary>
            Returns the name of the channel to be used for syncing
            </summary>
            <returns>The name of the channel to be used for syncing</returns>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.ResetDirty">
            <summary>
            Resets the dirty state and marks the variable as synced / clean
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.IsDirty">
            <summary>
            Gets Whether or not the container is dirty
            </summary>
            <returns>Whether or not the container is dirty</returns>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.CanClientWrite(System.UInt64)">
            <summary>
            Gets Whether or not a specific client can write to the varaible
            </summary>
            <param name="clientId">The clientId of the remote client</param>
            <returns>Whether or not the client can write to the variable</returns>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.CanClientRead(System.UInt64)">
            <summary>
            Gets Whether or not a specific client can read to the varaible
            </summary>
            <param name="clientId">The clientId of the remote client</param>
            <returns>Whether or not the client can read to the variable</returns>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.WriteDelta(System.IO.Stream)">
            <summary>
            Writes the dirty changes, that is, the changes since the variable was last dirty, to the writer
            </summary>
            <param name="stream">The stream to write the dirty changes to</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.WriteField(System.IO.Stream)">
            <summary>
            Writes the complete state of the variable to the writer
            </summary>
            <param name="stream">The stream to write the state to</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.ReadField(System.IO.Stream)">
            <summary>
            Reads the complete state from the reader and applies it
            </summary>
            <param name="stream">The stream to read the state from</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.ReadDelta(System.IO.Stream,System.Boolean)">
            <summary>
            Reads delta from the reader and applies them to the internal value
            </summary>
            <param name="stream">The stream to read the delta from</param>
            <param name="keepDirtyDelta">Whether or not the delta should be kept as dirty or consumed</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.INetworkedVar.SetNetworkedBehaviour(MLAPI.NetworkedBehaviour)">
            <summary>
            Sets NetworkedBehaviour the container belongs to.
            </summary>
            <param name="behaviour">The behaviour the container behaves to</param>
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVar`1">
            <summary>
            A variable that can be synchronized over the network.
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedVar.NetworkedVar`1.isDirty">
            <summary>
            Gets or sets Whether or not the variable needs to be delta synced
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVar`1.Settings">
            <summary>
            The settings for this var
            </summary>
        </member>
        <member name="P:MLAPI.NetworkedVar.NetworkedVar`1.LastSyncedTime">
            <summary>
            Gets the last time the variable was synced
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVar`1.OnValueChangedDelegate">
            <summary>
            Delegate type for value changed event
            </summary>
            <param name="previousValue">The value before the change</param>
            <param name="newValue">The new value</param>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVar`1.OnValueChanged">
            <summary>
            The callback to be invoked when the value gets changed
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.#ctor">
            <summary>
            Creates a NetworkedVar with the default value and settings
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <summary>
            Creates a NetworkedVar with the default value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedVar</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,`0)">
            <summary>
            Creates a NetworkedVar with a custom value and custom settings
            </summary>
            <param name="settings">The settings to use for the NetworkedVar</param>
            <param name="value">The initial value to use for the NetworkedVar</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.#ctor(`0)">
            <summary>
            Creates a NetworkedVar with a custom value and the default settings
            </summary>
            <param name="value">The initial value to use for the NetworkedVar</param>
        </member>
        <member name="P:MLAPI.NetworkedVar.NetworkedVar`1.Value">
            <summary>
            The value of the NetworkedVar container
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.ResetDirty">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.IsDirty">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.CanClientRead(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.WriteDelta(System.IO.Stream)">
            <summary>
            Writes the variable to the writer
            </summary>
            <param name="stream">The stream to write the value to</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.CanClientWrite(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.ReadDelta(System.IO.Stream,System.Boolean)">
            <summary>
            Reads value from the reader and applies it
            </summary>
            <param name="stream">The stream to read the value from</param>
            <param name="keepDirtyDelta">Whether or not the container should keep the dirty delta, or mark the delta as consumed</param>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.SetNetworkedBehaviour(MLAPI.NetworkedBehaviour)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.ReadField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.WriteField(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVar`1.GetChannel">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarString">
            <summary>
            A NetworkedVar that holds strings and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarString.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarString.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarString.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarString.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.String)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarBool">
            <summary>
            A NetworkedVar that holds bools and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarBool.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarBool.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarBool.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarBool.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarByte">
            <summary>
            A NetworkedVar that holds bytes and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarByte.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarByte.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarByte.#ctor(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarByte.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Byte)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarSByte">
            <summary>
            A NetworkedVar that holds sbytes and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarSByte.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarSByte.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarSByte.#ctor(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarSByte.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.SByte)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarUShort">
            <summary>
            A NetworkedVar that holds ushorts and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUShort.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUShort.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUShort.#ctor(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUShort.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarShort">
            <summary>
            A NetworkedVar that holds shorts and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarShort.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarShort.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarShort.#ctor(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarShort.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Int16)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarUInt">
            <summary>
            A NetworkedVar that holds uints and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUInt.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUInt.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUInt.#ctor(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarUInt.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarInt">
            <summary>
            A NetworkedVar that holds ints and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarInt.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarInt.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarInt.#ctor(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarInt.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarULong">
            <summary>
            A NetworkedVar that holds ulongs and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarULong.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarULong.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarULong.#ctor(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarULong.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarLong">
            <summary>
            A NetworkedVar that holds longs and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarLong.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarLong.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarLong.#ctor(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarLong.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarFloat">
            <summary>
            A NetworkedVar that holds floats and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarFloat.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarFloat.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarFloat.#ctor(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarFloat.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarDouble">
            <summary>
            A NetworkedVar that holds doubles and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarDouble.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarDouble.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarDouble.#ctor(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarDouble.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarVector2">
            <summary>
            A NetworkedVar that holds vector2s and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector2.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector2.#ctor(UnityEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector2.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Vector2)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarVector3">
            <summary>
            A NetworkedVar that holds vector3s and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector3.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector3.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector3.#ctor(UnityEngine.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector3.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Vector3)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarVector4">
            <summary>
            A NetworkedVar that holds vector4s and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector4.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector4.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector4.#ctor(UnityEngine.Vector4)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarVector4.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Vector4)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarColor">
            <summary>
            A NetworkedVar that holds colors and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor.#ctor(UnityEngine.Color)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Color)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarColor32">
            <summary>
            A NetworkedVar that holds color32s and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor32.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor32.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor32.#ctor(UnityEngine.Color32)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarColor32.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Color32)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarRay">
            <summary>
            A NetworkedVar that holds rays and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarRay.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarRay.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarRay.#ctor(UnityEngine.Ray)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarRay.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Ray)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarQuaternion">
            <summary>
            A NetworkedVar that holds quaternions and support serialization
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarQuaternion.#ctor">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarQuaternion.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarQuaternion.#ctor(UnityEngine.Quaternion)">
            <inheritdoc />
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarQuaternion.#ctor(MLAPI.NetworkedVar.NetworkedVarSettings,UnityEngine.Quaternion)">
            <inheritdoc />
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarPermission">
            <summary>
            Permission type
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarPermission.Everyone">
            <summary>
            Everyone
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarPermission.ServerOnly">
            <summary>
            Server-only operation
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarPermission.OwnerOnly">
            <summary>
            Owner-ownly
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarPermission.Custom">
            <summary>
            Custom delegate
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarPermissionsDelegate">
            <summary>
            Delegate type for permission checking
            </summary>
            <param name="clientId">The clientId whose permissions to check</param>
        </member>
        <member name="T:MLAPI.NetworkedVar.NetworkedVarSettings">
            <summary>
            The settings class used by the build in NetworkVar implementations
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.WritePermission">
            <summary>
            Defines the write permissions for this var
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.ReadPermission">
            <summary>
            Defines the read permissions for this var
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.WritePermissionCallback">
            <summary>
            The delegate used to evaluate write permission when the "Custom" mode is used
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.ReadPermissionCallback">
            <summary>
            The delegate used to evaluate read permission when the "Custom" mode is used
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.SendTickrate">
            <summary>
            The maximum times per second this var will be synced.
            A value of 0 will cause the variable to sync as soon as possible after being changed.
            A value of less than 0 will cause the variable to sync only at once at spawn and not update again.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.NetworkedVarSettings.SendChannel">
            <summary>
            The name of the channel to use for this variable.
            Variables with different channels will be split into different packets
            </summary>
        </member>
        <member name="M:MLAPI.NetworkedVar.NetworkedVarSettings.#ctor">
            <summary>
            Constructs a new NetworkedVarSettings instance
            </summary>
        </member>
        <member name="T:MLAPI.NetworkedVar.SyncedVarAttribute">
            <summary>
            SyncedVar attribute. Use this to automatically syncronize fields from the server to clients.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.SyncedVarAttribute.Channel">
            <summary>
            The channel to send changes on.
            </summary>
        </member>
        <member name="F:MLAPI.NetworkedVar.SyncedVarAttribute.SendTickrate">
            <summary>
            The maximum times per second this var will be synced.
            A value of 0 will cause the variable to sync as soon as possible after being changed.
            A value of less than 0 will cause the variable to sync only at once at spawn and not update again.
            </summary>
        </member>
        <member name="T:MLAPI.Profiling.NetworkProfiler">
            <summary>
            NetworkProfiler for profiling network traffic
            </summary>
        </member>
        <member name="P:MLAPI.Profiling.NetworkProfiler.Ticks">
            <summary>
            The ticks that has been recorded
            </summary>
        </member>
        <member name="P:MLAPI.Profiling.NetworkProfiler.isRunning">
            <summary>
            Whether or not the profiler is recording data
            </summary>
        </member>
        <member name="P:MLAPI.Profiling.NetworkProfiler.IsRunning">
            <summary>
            Whether or not the profiler is recording data
            </summary>
        </member>
        <member name="M:MLAPI.Profiling.NetworkProfiler.Start(System.Int32)">
            <summary>
            Starts recording data for the Profiler
            </summary>
            <param name="historyLength">The amount of ticks to keep in memory</param>
        </member>
        <member name="M:MLAPI.Profiling.NetworkProfiler.Stop">
            <summary>
            Stops recording data
            </summary>
        </member>
        <member name="M:MLAPI.Profiling.NetworkProfiler.Stop(MLAPI.Profiling.ProfilerTick[]@)">
            <summary>
            Stops recording data and fills the buffer with the recorded ticks and returns the length;
            </summary>
            <param name="tickBuffer">The buffer to fill with the ticks</param>
            <returns>The number of ticks recorded</returns>
        </member>
        <member name="M:MLAPI.Profiling.NetworkProfiler.Stop(System.Collections.Generic.List{MLAPI.Profiling.ProfilerTick}@)">
            <summary>
            Stops recording data and fills the buffer with the recorded ticks and returns the length;
            </summary>
            <param name="tickBuffer">The buffer to fill with the ticks</param>
            <returns>The number of ticks recorded</returns>
        </member>
        <member name="T:MLAPI.Profiling.TickType">
            <summary>
            The type of Tick
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickType.Event">
            <summary>
            Event tick. During EventTick SyncedVars are flushed etc
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickType.Receive">
            <summary>
            Receive tick. During ReceiveTick data is received from the transport
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickType.Send">
            <summary>
            Send tick. During Send data is sent from Transport queue
            </summary>
        </member>
        <member name="T:MLAPI.Profiling.ProfilerTick">
            <summary>
            A tick in used for the Profiler
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.ProfilerTick.Events">
            <summary>
            The events that occured during this tick
            </summary>
        </member>
        <member name="M:MLAPI.Profiling.ProfilerTick.SerializeToStream(System.IO.Stream)">
            <summary>
            Writes the current ProfilerTick to the stream
            </summary>
            <param name="stream">The stream containing</param>
        </member>
        <member name="M:MLAPI.Profiling.ProfilerTick.FromStream(System.IO.Stream)">
            <summary>
            Creates a ProfilerTick from data in the provided stream
            </summary>
            <param name="stream">The stream containing the ProfilerTick data</param>
            <returns>The ProfilerTick with data read from the stream</returns>
        </member>
        <member name="F:MLAPI.Profiling.ProfilerTick.Type">
            <summary>
            The type of tick
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.ProfilerTick.Frame">
            <summary>
            The frame the tick executed on
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.ProfilerTick.EventId">
            <summary>
            The id of the tick
            </summary>
        </member>
        <member name="P:MLAPI.Profiling.ProfilerTick.Bytes">
            <summary>
            The amount of bytes that were sent and / or received during this tick
            </summary>
        </member>
        <member name="T:MLAPI.Profiling.TickEvent">
            <summary>
            A event that can occur during a Event
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickEvent.EventType">
            <summary>
            The type of evenmt
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickEvent.Bytes">
            <summary>
            The amount of bytes sent or received
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickEvent.ChannelName">
            <summary>
            The name of the channel
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickEvent.MessageType">
            <summary>
            The message type
            </summary>
        </member>
        <member name="F:MLAPI.Profiling.TickEvent.Closed">
            <summary>
            Whether or not the event is closed
            </summary>
        </member>
        <member name="M:MLAPI.Profiling.TickEvent.SerializeToStream(System.IO.Stream)">
            <summary>
            Writes the TickEvent data to the stream
            </summary>
            <param name="stream">The stream to write the TickEvent data to</param>
        </member>
        <member name="M:MLAPI.Profiling.TickEvent.FromStream(System.IO.Stream)">
            <summary>
            Creates a TickEvent from data in the provided stream
            </summary>
            <param name="stream">The stream containing the TickEvent data</param>
            <returns>The TickEvent with data read from the stream</returns>
        </member>
        <member name="T:MLAPI.Prototyping.NetworkedAnimator">
            <summary>
            A prototype component for syncing animations
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedAnimator.EnableProximity">
            <summary>
            Is proximity enabled
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedAnimator.ProximityRange">
            <summary>
            The proximity range
            </summary>
        </member>
        <member name="P:MLAPI.Prototyping.NetworkedAnimator.animator">
            <summary>
            Gets or sets the animator component used for syncing the animations
            </summary>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedAnimator.SetParameterAutoSend(System.Int32,System.Boolean)">
            <summary>
            TODO
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedAnimator.GetParameterAutoSend(System.Int32)">
            <summary>
            TODO
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedAnimator.ResetParameterOptions">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedAnimator.SetTrigger(System.String)">
            <summary>
            TODO
            </summary>
            <param name="triggerName"></param>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedAnimator.SetTrigger(System.Int32)">
            <summary>
            TODO
            </summary>
            <param name="hash"></param>
        </member>
        <member name="T:MLAPI.Prototyping.NetworkedNavMeshAgent">
            <summary>
            A prototype component for syncing navmeshagents
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedNavMeshAgent.EnableProximity">
            <summary>
            Is proximity enabled
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedNavMeshAgent.ProximityRange">
            <summary>
            The proximity range
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedNavMeshAgent.CorrectionDelay">
            <summary>
            The delay in seconds between corrections
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedNavMeshAgent.DriftCorrectionPercentage">
            <summary>
            The percentage to lerp on corrections
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedNavMeshAgent.WarpOnDestinationChange">
            <summary>
            Should we warp on destination change
            </summary>
        </member>
        <member name="T:MLAPI.Prototyping.NetworkedTransform">
            <summary>
            A prototype component for syncing transforms
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.FixedSendsPerSecond">
            <summary>
            The base amount of sends per seconds to use when range is disabled
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.AssumeSyncedSends">
            <summary>
            Is the sends per second assumed to be the same across all instances
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.InterpolatePosition">
            <summary>
            Enable interpolation
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.SnapDistance">
            <summary>
            The distance before snaping to the position
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.InterpolateServer">
            <summary>
            Should the server interpolate
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.MinMeters">
            <summary>
            The min meters to move before a send is sent
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.MinDegrees">
            <summary>
            The min degrees to rotate before a send it sent
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.ExtrapolatePosition">
            <summary>
            Enables extrapolation
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.MaxSendsToExtrapolate">
            <summary>
            The maximum amount of expected send rates to extrapolate over when awaiting new packets.
            A higher value will result in continued extrapolation after an object has stopped moving
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.Channel">
            <summary>
            The channel to send the data on
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.EnableRange">
            <summary>
            Enables range based send rate
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.EnableNonProvokedResendChecks">
            <summary>
            Checks for missed sends without provocation. Provocation being a client inside it's normal SendRate
            </summary>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.DistanceSendrate">
            <summary>
            The curve to use to calculate the send rate
            </summary>
        </member>
        <member name="T:MLAPI.Prototyping.NetworkedTransform.MoveValidationDelegate">
            <summary>
            The delegate used to check if a move is valid
            </summary>
            <param name="oldPos">The previous position</param>
            <param name="newPos">The new requested position</param>
            <returns>Returns Whether or not the move is valid</returns>
        </member>
        <member name="F:MLAPI.Prototyping.NetworkedTransform.IsMoveValidDelegate">
            <summary>
            If set, moves will only be accepted if the custom delegate returns true
            </summary>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedTransform.NetworkStart">
            <summary>
            Registers message handlers
            </summary>
        </member>
        <member name="M:MLAPI.Prototyping.NetworkedTransform.Teleport(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Teleports the transform to the given position and rotation
            </summary>
            <param name="position">The position to teleport to</param>
            <param name="rotation">The rotation to teleport to</param>
        </member>
        <member name="T:MLAPI.SceneManagement.NetworkSceneManager">
            <summary>
            Main class for managing network scenes
            </summary>
        </member>
        <member name="T:MLAPI.SceneManagement.NetworkSceneManager.SceneSwitchedDelegate">
            <summary>
            Delegate for when the scene has been switched
            </summary>
        </member>
        <member name="T:MLAPI.SceneManagement.NetworkSceneManager.SceneSwitchStartedDelegate">
            <summary>
            Delegate for when a scene switch has been initiated
            </summary>
        </member>
        <member name="E:MLAPI.SceneManagement.NetworkSceneManager.OnSceneSwitched">
            <summary>
            Event that is invoked when the scene is switched
            </summary>
        </member>
        <member name="E:MLAPI.SceneManagement.NetworkSceneManager.OnSceneSwitchStarted">
            <summary>
            Event that is invoked when a local scene switch has started
            </summary>
        </member>
        <member name="M:MLAPI.SceneManagement.NetworkSceneManager.AddRuntimeSceneName(System.String,System.UInt32)">
            <summary>
            Adds a scene during runtime.
            The index is REQUIRED to be unique AND the same across all instances.
            </summary>
            <param name="sceneName">Scene name.</param>
            <param name="index">Index.</param>
        </member>
        <member name="M:MLAPI.SceneManagement.NetworkSceneManager.SwitchScene(System.String)">
            <summary>
            Switches to a scene with a given name. Can only be called from Server
            </summary>
            <param name="sceneName">The name of the scene to switch to</param>
        </member>
        <member name="T:MLAPI.SceneManagement.SceneSwitchProgress">
            <summary>
            Class for tracking scene switching progress by server and clients.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.DoneClients">
            <summary>
            List of clientIds of those clients that is done loading the scene.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.TimeAtInitiation">
            <summary>
            The NetworkTime time at the moment the scene switch was initiated by the server.
            </summary>
        </member>
        <member name="T:MLAPI.SceneManagement.SceneSwitchProgress.OnCompletedDelegate">
            <summary>
            Delegate type for when the switch scene progress is completed. Either by all clients done loading the scene or by time out.
            </summary>
        </member>
        <member name="E:MLAPI.SceneManagement.SceneSwitchProgress.OnComplete">
            <summary>
            The callback invoked when the switch scene progress is completed. Either by all clients done loading the scene or by time out.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.IsCompleted">
            <summary>
            Is this scene switch progresses completed, all clients are done loading the scene or a timeout has occured.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.isCompleted">
            <summary>
            Is this scene switch progresses completed, all clients are done loading the scene or a timeout has occured.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.IsAllClientsDoneLoading">
            <summary>
            If all clients are done loading the scene, at the moment of completed.
            </summary>
        </member>
        <member name="P:MLAPI.SceneManagement.SceneSwitchProgress.isAllClientsDoneLoading">
            <summary>
            If all clients are done loading the scene, at the moment of completed.
            </summary>
        </member>
        <member name="T:MLAPI.SceneManagement.SceneSwitchProgress.OnClientLoadedSceneDelegate">
            <summary>
            Delegate type for when a client is done loading the scene.
            </summary>
        </member>
        <member name="E:MLAPI.SceneManagement.SceneSwitchProgress.OnClientLoadedScene">
            <summary>
            The callback invoked when a client is done loading the scene.
            </summary>
        </member>
        <member name="T:MLAPI.Security.BigInteger">
            <summary>
            This is a BigInteger class. Holds integer that is more than 64-bit (long).
            </summary>
            <remarks>
            This class contains overloaded arithmetic operators(+, -, *, /, %), bitwise operators(&amp;, |) and other
            operations that can be done with normal integer. It also contains implementation of various prime test.
            This class also contains methods dealing with cryptography such as generating prime number, generating
            a coprime number.
            </remarks>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor">
            <summary>
            Default constructor for BigInteger of value 0
            </summary>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor (Default value provided by long)
            </summary>
            <param name="value">Turn the long value into BigInteger type</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(System.UInt64)">
            <summary>
            Constructor (Default value provided by ulong)
            </summary>
            <param name="value">Turn the unsigned long value into BigInteger type</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(MLAPI.Security.BigInteger)">
            <summary>
            Constructor (Default value provided by BigInteger)
            </summary>
            <param name="bi"></param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(System.String,System.Int32)">
             <summary>
             Constructor (Default value provided by a string of digits of the specified base)
             </summary>
             <example>
             To initialize "a" with the default value of 1234 in base 10:
                  BigInteger a = new BigInteger("1234", 10)
             To initialize "a" with the default value of -0x1D4F in base 16:
                  BigInteger a = new BigInteger("-1D4F", 16)
             </example>
            
             <param name="value">String value in the format of [sign][magnitude]</param>
             <param name="radix">The base of value</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Constructor (Default value provided by an array of bytes of the specified length.)
            </summary>
            <param name="inData">A list of byte values</param>
            <param name="length">Default -1</param>
            <param name="offset">Default 0</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.#ctor(System.UInt32[])">
            <summary>
             Constructor (Default value provided by an array of unsigned integers)
            </summary>
            <param name="inData">Array of unsigned integer</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Implicit(System.Int64)~MLAPI.Security.BigInteger">
            <summary>
            Cast a type long value to type BigInteger value
            </summary>
            <param name="value">A long value</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Implicit(System.UInt64)~MLAPI.Security.BigInteger">
            <summary>
            Cast a type ulong value to type BigInteger value
            </summary>
            <param name="value">An unsigned long value</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Implicit(System.Int32)~MLAPI.Security.BigInteger">
            <summary>
            Cast a type int value to type BigInteger value
            </summary>
            <param name="value">An int value</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Implicit(System.UInt32)~MLAPI.Security.BigInteger">
            <summary>
            Cast a type uint value to type BigInteger value
            </summary>
            <param name="value">An unsigned int value</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Addition(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of addition operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Result of the addition of 2 BigIntegers</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Increment(MLAPI.Security.BigInteger)">
            <summary>
            Overloading of the unary ++ operator, which increments BigInteger by 1
            </summary>
            <param name="bi1">A BigInteger</param>
            <returns>Incremented BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Subtraction(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of subtraction operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Result of the subtraction of 2 BigIntegers</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Decrement(MLAPI.Security.BigInteger)">
            <summary>
            Overloading of the unary -- operator, decrements BigInteger by 1
            </summary>
            <param name="bi1">A BigInteger</param>
            <returns>Decremented BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Multiply(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of multiplication operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Result of the multiplication of 2 BigIntegers</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_LeftShift(MLAPI.Security.BigInteger,System.Int32)">
            <summary>
            Overloading of the unary &lt;&lt; operator (left shift)
            </summary>
            <remarks>
            Shifting by a negative number is an undefined behaviour (UB).
            </remarks>
            <param name="bi1">A BigInteger</param>
            <param name="shiftVal">Left shift by shiftVal bit</param>
            <returns>Left-shifted BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_RightShift(MLAPI.Security.BigInteger,System.Int32)">
            <summary>
            Overloading of the unary &gt;&gt; operator (right shift)
            </summary>
            <remarks>
            Shifting by a negative number is an undefined behaviour (UB).
            </remarks>
            <param name="bi1">A BigInteger</param>
            <param name="shiftVal">Right shift by shiftVal bit</param>
            <returns>Right-shifted BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_OnesComplement(MLAPI.Security.BigInteger)">
            <summary>
            Overloading of the bit-wise NOT operator (1's complement)
            </summary>
            <param name="bi1">A BigInteger</param>
            <returns>Complemented BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_UnaryNegation(MLAPI.Security.BigInteger)">
            <summary>
            Overloading of the NEGATE operator (2's complement)
            </summary>
            <param name="bi1">A BigInteger</param>
            <returns>Negated BigInteger or default BigInteger value if bi1 is 0</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Equality(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of equality operator, allows comparing 2 BigIntegers with == operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Inequality(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of not equal operator, allows comparing 2 BigIntegers with != operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Equals(System.Object)">
            <summary>
            Overriding of Equals method, allows comparing BigInteger with an arbitary object
            </summary>
            <param name="o">Input object, to be casted into BigInteger type for comparison</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_GreaterThan(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of greater than operator, allows comparing 2 BigIntegers with &gt; operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_LessThan(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of greater than operator, allows comparing 2 BigIntegers with &lt; operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_GreaterThanOrEqual(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of greater than or equal to operator, allows comparing 2 BigIntegers with &gt;= operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_LessThanOrEqual(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of less than or equal to operator, allows comparing 2 BigIntegers with &lt;= operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>Boolean result of the comparison</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Division(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of division operator
            </summary>
            <remarks>The dataLength of the divisor's absolute value must be less than maxLength</remarks>
            <param name="bi1">Dividend</param>
            <param name="bi2">Divisor</param>
            <returns>Quotient of the division</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_Modulus(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of modulus operator
            </summary>
            <remarks>The dataLength of the divisor's absolute value must be less than maxLength</remarks>
            <param name="bi1">Dividend</param>
            <param name="bi2">Divisor</param>
            <returns>Remainder of the division</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_BitwiseAnd(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of bitwise AND operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>BigInteger result after performing &amp; operation</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_BitwiseOr(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of bitwise OR operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>BigInteger result after performing | operation</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.op_ExclusiveOr(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Overloading of bitwise XOR operator
            </summary>
            <param name="bi1">First BigInteger</param>
            <param name="bi2">Second BigInteger</param>
            <returns>BigInteger result after performing ^ operation</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Max(MLAPI.Security.BigInteger)">
            <summary>
            Compare this and a BigInteger and find the maximum one
            </summary>
            <param name="bi">BigInteger to be compared with this</param>
            <returns>The bigger value of this and bi</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Min(MLAPI.Security.BigInteger)">
            <summary>
            Compare this and a BigInteger and find the minimum one
            </summary>
            <param name="bi">BigInteger to be compared with this</param>
            <returns>The smaller value of this and bi</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Abs">
            <summary>
            Returns the absolute value
            </summary>
            <returns>Absolute value of this</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.ToString">
            <summary>
            Returns a string representing the BigInteger in base 10
            </summary>
            <returns>string representation of the BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.ToString(System.Int32)">
            <summary>
            Returns a string representing the BigInteger in [sign][magnitude] format in the specified radix
            </summary>
            <example>If the value of BigInteger is -255 in base 10, then ToString(16) returns "-FF"</example>
            <param name="radix">Base</param>
            <returns>string representation of the BigInteger in [sign][magnitude] format</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.ToHexString">
            <summary>
            Returns a hex string showing the contains of the BigInteger
            </summary>
            <example>
            1) If the value of BigInteger is 255 in base 10, then ToHexString() returns "FF"
            2) If the value of BigInteger is -255 in base 10, thenToHexString() returns ".....FFFFFFFFFF01", which is the 2's complement representation of -255.
            </example>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.ModPow(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Modulo Exponentiation
            </summary>
            <param name="exp">Exponential</param>
            <param name="n">Modulo</param>
            <returns>BigInteger result of raising this to the power of exp and then modulo n </returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.BarrettReduction(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
             <summary>
             Fast calculation of modular reduction using Barrett's reduction
             </summary>
             <remarks>
             Requires x &lt; b^(2k), where b is the base.  In this case, base is 2^32 (uint).
            
             Reference [4]
             </remarks>
             <param name="x"></param>
             <param name="n"></param>
             <param name="constant"></param>
             <returns></returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Gcd(MLAPI.Security.BigInteger)">
            <summary>
            Returns gcd(this, bi)
            </summary>
            <param name="bi"></param>
            <returns>Greatest Common Divisor of this and bi</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenRandomBits(System.Int32,System.Random)">
            <summary>
            Populates "this" with the specified amount of random bits
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenRandomBits(System.Int32,System.Security.Cryptography.RNGCryptoServiceProvider)">
            <summary>
            Populates "this" with the specified amount of random bits (secured version)
            </summary>
            <param name="bits"></param>
            <param name="rng"></param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.BitCount">
            <summary>
            Returns the position of the most significant bit in the BigInteger
            </summary>
            <example>
            1) The result is 1, if the value of BigInteger is 0...0000 0000
            2) The result is 1, if the value of BigInteger is 0...0000 0001
            3) The result is 2, if the value of BigInteger is 0...0000 0010
            4) The result is 2, if the value of BigInteger is 0...0000 0011
            5) The result is 5, if the value of BigInteger is 0...0001 0011
            </example>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.FermatLittleTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Fermat's little theorem
             </summary>
             <remarks>
             for any a &lt; p (p does not divide a) if
                  a^(p-1) mod p != 1 then p is not prime.
            
             Otherwise, p is probably prime (pseudoprime to the chosen base).
            
             This method is fast but fails for Carmichael numbers when the randomly chosen base is a factor of the number.
             </remarks>
             <param name="confidence">Number of chosen bases</param>
             <returns>True if this is a pseudoprime to randomly chosen bases</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.RabinMillerTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Rabin-Miller's
             </summary>
             <remarks>
             for any p &gt; 0 with p - 1 = 2^s * t
            
             p is probably prime (strong pseudoprime) if for any a &lt; p,
             1) a^t mod p = 1 or
             2) a^((2^j)*t) mod p = p-1 for some 0 &lt;= j &lt;= s-1
            
             Otherwise, p is composite.
             </remarks>
             <param name="confidence">Number of chosen bases</param>
             <returns>True if this is a strong pseudoprime to randomly chosen bases</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.SolovayStrassenTest(System.Int32)">
             <summary>
             Probabilistic prime test based on Solovay-Strassen (Euler Criterion)
             </summary>
             <remarks>
              p is probably prime if for any a &lt; p (a is not multiple of p),
             a^((p-1)/2) mod p = J(a, p)
            
             where J is the Jacobi symbol.
            
             Otherwise, p is composite.
             </remarks>
             <param name="confidence">Number of chosen bases</param>
             <returns>True if this is a Euler pseudoprime to randomly chosen bases</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.LucasStrongTest">
             <summary>
             Implementation of the Lucas Strong Pseudo Prime test
             </summary>
             <remarks>
             Let n be an odd number with gcd(n,D) = 1, and n - J(D, n) = 2^s * d
             with d odd and s >= 0.
            
             If Ud mod n = 0 or V2^r*d mod n = 0 for some 0 &lt;= r &lt; s, then n
             is a strong Lucas pseudoprime with parameters (P, Q).  We select
             P and Q based on Selfridge.
             </remarks>
             <returns>True if number is a strong Lucus pseudo prime</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.IsProbablePrime(System.Int32)">
            <summary>
            Determines whether a number is probably prime using the Rabin-Miller's test
            </summary>
            <remarks>
            Before applying the test, the number is tested for divisibility by primes &lt; 2000
            </remarks>
            <param name="confidence">Number of chosen bases</param>
            <returns>True if this is probably prime</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.IsProbablePrime">
             <summary>
             Determines whether this BigInteger is probably prime using a combination of base 2 strong pseudoprime test and Lucas strong pseudoprime test
             </summary>
             <remarks>
             The sequence of the primality test is as follows,
            
             1) Trial divisions are carried out using prime numbers below 2000.
                if any of the primes divides this BigInteger, then it is not prime.
            
             2) Perform base 2 strong pseudoprime test.  If this BigInteger is a
                base 2 strong pseudoprime, proceed on to the next step.
            
             3) Perform strong Lucas pseudoprime test.
            
             For a detailed discussion of this primality test, see [6].
             </remarks>
             <returns>True if this is probably prime</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.IntValue">
            <summary>
            Returns the lowest 4 bytes of the BigInteger as an int
            </summary>
            <returns>Lowest 4 bytes as integer</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.LongValue">
            <summary>
            Returns the lowest 8 bytes of the BigInteger as a long
            </summary>
            <returns>Lowest 8 bytes as long</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Jacobi(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
            <summary>
            Computes the Jacobi Symbol for 2 BigInteger a and b
            </summary>
            <remarks>
            Algorithm adapted from [3] and [4] with some optimizations
            </remarks>
            <param name="a">Any BigInteger</param>
            <param name="b">Odd BigInteger</param>
            <returns>Jacobi Symbol</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenPseudoPrime(System.Int32,System.Int32,System.Random)">
            <summary>
            Generates a positive BigInteger that is probably prime
            </summary>
            <param name="bits">Number of bit</param>
            <param name="confidence">Number of chosen bases</param>
            <param name="rand">Random object</param>
            <returns>A probably prime number</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenPseudoPrime(System.Int32,System.Int32,System.Security.Cryptography.RNGCryptoServiceProvider)">
            <summary>
            Generates a positive BigInteger that is probably prime (secured version)
            </summary>
            <param name="bits">Number of bit</param>
            <param name="confidence">Number of chosen bases</param>
            <param name="rand">RNGCryptoServiceProvider object</param>
            <returns>A probably prime number</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenCoPrime(System.Int32,System.Random)">
            <summary>
            Generates a random number with the specified number of bits such that gcd(number, this) = 1
            </summary>
            <remarks>
            The number of bits must be greater than 0 and less than 2209
            </remarks>
            <param name="bits">Number of bit</param>
            <param name="rand">Random object</param>
            <returns>Relatively prime number of this</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GenCoPrime(System.Int32,System.Security.Cryptography.RNGCryptoServiceProvider)">
            <summary>
            Generates a random number with the specified number of bits such that gcd(number, this) = 1 (secured)
            </summary>
            <param name="bits">Number of bit</param>
            <param name="rand">Random object</param>
            <returns>Relatively prime number of this</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.ModInverse(MLAPI.Security.BigInteger)">
            <summary>
            Returns the modulo inverse of this
            </summary>
            <remarks>
            Throws ArithmeticException if the inverse does not exist.  (i.e. gcd(this, modulus) != 1)
            </remarks>
            <param name="modulus"></param>
            <returns>Modulo inverse of this</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.GetBytes">
            <summary>
            Returns the value of the BigInteger as a byte array
            </summary>
            <remarks>
            The lowest index contains the MSB
            </remarks>
            <returns>Byte array containing value of the BigInteger</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.SetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 1
            </summary>
            <remarks>
            The Least Significant Bit position is 0
            </remarks>
            <param name="bitNum">The position of bit to be changed</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.UnsetBit(System.UInt32)">
            <summary>
            Sets the value of the specified bit to 0
            </summary>
            <remarks>
            The Least Significant Bit position is 0
            </remarks>
            <param name="bitNum">The position of bit to be changed</param>
        </member>
        <member name="M:MLAPI.Security.BigInteger.Sqrt">
            <summary>
            Returns a value that is equivalent to the integer square root of this
            </summary>
            <remarks>
            The integer square root of "this" is defined as the largest integer n, such that (n * n) &lt;= this.
            Square root of negative integer is an undefined behaviour (UB).
            </remarks>
            <returns>Integer square root of this</returns>
        </member>
        <member name="M:MLAPI.Security.BigInteger.LucasSequence(MLAPI.Security.BigInteger,MLAPI.Security.BigInteger,MLAPI.Security.BigInteger,MLAPI.Security.BigInteger)">
             <summary>
             Returns the k_th number in the Lucas Sequence reduced modulo n
             </summary>
             <remarks>
             Uses index doubling to speed up the process.  For example, to calculate V(k),
             we maintain two numbers in the sequence V(n) and V(n+1).
            
             To obtain V(2n), we use the identity
                  V(2n) = (V(n) * V(n)) - (2 * Q^n)
             To obtain V(2n+1), we first write it as
                  V(2n+1) = V((n+1) + n)
             and use the identity
                  V(m+n) = V(m) * V(n) - Q * V(m-n)
             Hence,
                  V((n+1) + n) = V(n+1) * V(n) - Q^n * V((n+1) - n)
                               = V(n+1) * V(n) - Q^n * V(1)
                               = V(n+1) * V(n) - Q^n * P
            
             We use k in its binary expansion and perform index doubling for each
             bit position.  For each bit position that is set, we perform an
             index doubling followed by an index addition.  This means that for V(n),
             we need to update it to V(2n+1).  For V(n+1), we need to update it to
             V((2n+1)+1) = V(2*(n+1))
            
             This function returns
             [0] = U(k)
             [1] = V(k)
             [2] = Q^n
            
             Where U(0) = 0 % n, U(1) = 1 % n
                   V(0) = 2 % n, V(1) = P % n
             </remarks>
             <param name="p"></param>
             <param name="q"></param>
             <param name="k"></param>
             <param name="n"></param>
             <returns></returns>
        </member>
        <member name="T:MLAPI.Security.CryptographyHelper">
            <summary>
            Helper class for encryption purposes
            </summary>
        </member>
        <member name="F:MLAPI.Security.CryptographyHelper.OnValidateCertificateCallback">
            <summary>
            The delegate to invoke to validate the certificates
            </summary>
        </member>
        <member name="T:MLAPI.Security.CryptographyHelper.VerifyCertificateDelegate">
            <summary>
            The delegate type used to validate certificates
            </summary>
            <param name="certificate">The certificate to validate</param>
            <param name="hostname">The hostname the certificate is claiming to be</param>
        </member>
        <member name="M:MLAPI.Security.CryptographyHelper.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            
            </summary>
            <param name="certificate">The certificate to validate</param>
            <param name="hostname">The hostname the certificate is claiming to be</param>
            <returns>Whether or not the certificate is considered valid</returns>
        </member>
        <member name="M:MLAPI.Security.CryptographyHelper.GetClientKey(System.UInt64)">
            <summary>
            Gets the aes key for any given clientId
            </summary>
            <param name="clientId">The clientId of the client whose aes key we want</param>
            <returns>The aes key in binary</returns>
        </member>
        <member name="M:MLAPI.Security.CryptographyHelper.GetServerKey">
            <summary>
            Gets the aes key for the server
            </summary>
            <returns>The servers aes key</returns>
        </member>
        <member name="T:MLAPI.Security.SecuritySendFlags">
            <summary>
            The security operations of a payload
            </summary>
        </member>
        <member name="F:MLAPI.Security.SecuritySendFlags.None">
            <summary>
            No security operations are applied
            </summary>
        </member>
        <member name="F:MLAPI.Security.SecuritySendFlags.Encrypted">
            <summary>
            The payload is encrypted
            </summary>
        </member>
        <member name="F:MLAPI.Security.SecuritySendFlags.Authenticated">
            <summary>
            The payload is authenticated
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.Arithmetic">
            <summary>
            Arithmetic helper class
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Arithmetic.ZigZagEncode(System.Int64)">
            <summary>
            ZigZag encodes a signed integer and maps it to a unsigned integer
            </summary>
            <param name="value">The signed integer to encode</param>
            <returns>A ZigZag encoded version of the integer</returns>
        </member>
        <member name="M:MLAPI.Serialization.Arithmetic.ZigZagDecode(System.UInt64)">
            <summary>
            Decides a ZigZag encoded integer back to a signed integer
            </summary>
            <param name="value">The unsigned integer</param>
            <returns>The signed version of the integer</returns>
        </member>
        <member name="M:MLAPI.Serialization.Arithmetic.VarIntSize(System.UInt64)">
            <summary>
            Gets the output size in bytes after VarInting a unsigned integer
            </summary>
            <param name="value">The unsigned integer whose length to get</param>
            <returns>The amount of bytes</returns>
        </member>
        <member name="T:MLAPI.Serialization.AutoBitWritable">
            <summary>
            AutoBitWritable implements IBitWritable and automatically serializes fields using reflection
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.AutoBitWritable.Write(System.IO.Stream)">
            <summary>
            Writes the contents of the type instance to the stream
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:MLAPI.Serialization.AutoBitWritable.Read(System.IO.Stream)">
            <summary>
            Reads the contents from the stream and applies it to the type instance
            </summary>
            <param name="stream">The stream to read from</param>
        </member>
        <member name="T:MLAPI.Serialization.BitReader">
            <summary>
            A BinaryReader that can do bit wise manipulation when backed by a BitStream
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new BitReader backed by a given stream
            </summary>
            <param name="stream">The stream to read from</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.SetStream(System.IO.Stream)">
            <summary>
            Changes the underlying stream the reader is reading from
            </summary>
            <param name="stream">The stream to read from</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadByte">
            <summary>
            Reads a single byte
            </summary>
            <returns>The byte read as an integer</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadByteDirect">
            <summary>
            Reads a byte
            </summary>
            <returns>The byte read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadBit">
            <summary>
            Reads a single bit
            </summary>
            <returns>The bit read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadBool">
            <summary>
            Reads a single bit
            </summary>
            <returns>The bit read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.SkipPadBits">
            <summary>
            Skips pad bits and aligns the position to the next byte
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadObjectPacked(System.Type)">
            <summary>
            Reads a single boxed object of a given type in a packed format
            </summary>
            <param name="type">The type to read</param>
            <returns>Returns the boxed read object</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadSingle">
            <summary>
            Read a single-precision floating point value from the stream.
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDouble">
            <summary>
            Read a double-precision floating point value from the stream.
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadSinglePacked">
            <summary>
            Read a single-precision floating point value from the stream from a varint
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDoublePacked">
            <summary>
            Read a double-precision floating point value from the stream as a varint
            </summary>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector2">
            <summary>
            Read a Vector2 from the stream.
            </summary>
            <returns>The Vector2 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector2Packed">
            <summary>
            Read a Vector2 from the stream.
            </summary>
            <returns>The Vector2 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector3">
            <summary>
            Read a Vector3 from the stream.
            </summary>
            <returns>The Vector3 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector3Packed">
            <summary>
            Read a Vector3 from the stream.
            </summary>
            <returns>The Vector3 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector4">
            <summary>
            Read a Vector4 from the stream.
            </summary>
            <returns>The Vector4 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadVector4Packed">
            <summary>
            Read a Vector4 from the stream.
            </summary>
            <returns>The Vector4 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadColor">
            <summary>
            Read a Color from the stream.
            </summary>
            <returns>The Color read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadColorPacked">
            <summary>
            Read a Color from the stream.
            </summary>
            <returns>The Color read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadColor32">
            <summary>
            Read a Color32 from the stream.
            </summary>
            <returns>The Color32 read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRay">
            <summary>
            Read a Ray from the stream.
            </summary>
            <returns>The Ray read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRayPacked">
            <summary>
            Read a Ray from the stream.
            </summary>
            <returns>The Ray read from the stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRangedSingle(System.Single,System.Single,System.Int32)">
            <summary>
            Read a single-precision floating point value from the stream. The value is between (inclusive) the minValue and maxValue.
            </summary>
            <param name="minValue">Minimum value that this value could be</param>
            <param name="maxValue">Maximum possible value that this could be</param>
            <param name="bytes">How many bytes the compressed value occupies. Must be between 1 and 4 (inclusive)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRangedDouble(System.Double,System.Double,System.Int32)">
            <summary>
            read a double-precision floating point value from the stream. The value is between (inclusive) the minValue and maxValue.
            </summary>
            <param name="minValue">Minimum value that this value could be</param>
            <param name="maxValue">Maximum possible value that this could be</param>
            <param name="bytes">How many bytes the compressed value occupies. Must be between 1 and 8 (inclusive)</param>
            <returns>The read value</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRotationPacked">
            <summary>
            Reads the rotation from the stream
            </summary>
            <returns>The rotation read from the stream</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRotation(System.Int32)">
            <summary>
            Reads the rotation from the stream
            </summary>
            <returns>The rotation read from the stream</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadRotation">
            <summary>
            Reads the rotation from the stream
            </summary>
            <returns>The rotation read from the stream</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadBits(System.Int32)">
            <summary>
            Read a certain amount of bits from the stream.
            </summary>
            <param name="bitCount">How many bits to read. Minimum 0, maximum 8.</param>
            <returns>The bits that were read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadByteBits(System.Int32)">
            <summary>
            Read a certain amount of bits from the stream.
            </summary>
            <param name="bitCount">How many bits to read. Minimum 0, maximum 64.</param>
            <returns>The bits that were read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadNibble(System.Boolean)">
            <summary>
            Read a nibble (4 bits) from the stream.
            </summary>
            <param name="asUpper">Whether or not the nibble should be left-shifted by 4 bits</param>
            <returns>The nibble that was read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadNibble">
            <summary>
            Read a nibble (4 bits) from the stream.
            </summary>
            <returns>The nibble that was read</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadSByte">
            <summary>
            Reads a signed byte
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt16">
            <summary>
            Read an unsigned short (UInt16) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt16">
            <summary>
            Read a signed short (Int16) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadChar">
            <summary>
            Read a single character from the stream
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt32">
            <summary>
            Read an unsigned int (UInt32) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt32">
            <summary>
            Read a signed int (Int32) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt64">
            <summary>
            Read an unsigned long (UInt64) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt64">
            <summary>
            Read a signed long (Int64) from the stream.
            </summary>
            <returns>Value read from stream.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt16Packed">
            <summary>
            Read a ZigZag encoded varint signed short (Int16) from the stream.
            </summary>
            <returns>Decoded un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt16Packed">
            <summary>
            Read a varint unsigned short (UInt16) from the stream.
            </summary>
            <returns>Un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadCharPacked">
            <summary>
            Read a varint two-byte character from the stream.
            </summary>
            <returns>Un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt32Packed">
            <summary>
            Read a ZigZag encoded varint signed int (Int32) from the stream.
            </summary>
            <returns>Decoded un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt32Packed">
            <summary>
            Read a varint unsigned int (UInt32) from the stream.
            </summary>
            <returns>Un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadInt64Packed">
            <summary>
            Read a ZigZag encoded varint signed long(Int64) from the stream.
            </summary>
            <returns>Decoded un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUInt64Packed">
            <summary>
            Read a varint unsigned long (UInt64) from the stream.
            </summary>
            <returns>Un-varinted value.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadString(System.Boolean)">
            <summary>
            Read a string from the stream.
            </summary>
            <returns>The string that was read.</returns>
            <param name="oneByteChars">If set to <c>true</c> one byte chars are used and only ASCII is supported.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadString(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Read a string from the stream.
            </summary>
            <returns>The string that was read.</returns>
            <param name="builder">The builder to read the values into or null to use a new builder.</param>
            <param name="oneByteChars">If set to <c>true</c> one byte chars are used and only ASCII is supported.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringPacked(System.Text.StringBuilder)">
            <summary>
            Read string encoded as a varint from the stream.
            </summary>
            <returns>The string that was read.</returns>
            <param name="builder">The builder to read the string into or null to use a new builder</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringDiff(System.String,System.Boolean)">
            <summary>
            Read string diff from the stream.
            </summary>
            <returns>The string based on the diff and the old version.</returns>
            <param name="compare">The version to compare the diff to.</param>
            <param name="oneByteChars">If set to <c>true</c> one byte chars are used and only ASCII is supported.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringDiff(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Read string diff from the stream.
            </summary>
            <returns>The string based on the diff and the old version</returns>
            <param name="builder">The builder to read the string into or null to use a new builder.</param>
            <param name="compare">The version to compare the diff to.</param>
            <param name="oneByteChars">If set to <c>true</c> one byte chars are used and only ASCII is supported.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringDiff(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Read string diff from the stream.
            </summary>
            <returns>The string based on the diff and the old version.</returns>
            <param name="compareAndBuffer">The builder containing the current version and that will also be used as the output buffer.</param>
            <param name="oneByteChars">If set to <c>true</c> one byte chars will be used and only ASCII will be supported.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringPackedDiff(System.String)">
            <summary>
            Read string diff encoded as varints from the stream.
            </summary>
            <returns>The string based on the diff and the old version.</returns>
            <param name="compare">The version to compare the diff to.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringPackedDiff(System.Text.StringBuilder,System.String)">
            <summary>
            Read string diff encoded as varints from the stream.
            </summary>
            <returns>The string based on the diff and the old version</returns>
            <param name="builder">The builder to read the string into or null to use a new builder.</param>
            <param name="compare">The version to compare the diff to.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadStringPackedDiff(System.Text.StringBuilder)">
            <summary>
            Read string diff encoded as varints from the stream.
            </summary>
            <returns>The string based on the diff and the old version.</returns>
            <param name="compareAndBuffer">The builder containing the current version and that will also be used as the output buffer.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadByteArray(System.Byte[],System.Int64)">
            <summary>
            Read byte array into an optional buffer from the stream.
            </summary>
            <returns>The byte array that has been read.</returns>
            <param name="readTo">The array to read into. If the array is not large enough or if it's null. A new array is created.</param>
            <param name="knownLength">The length of the array if it's known. Otherwise -1</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadByteArrayDiff(System.Byte[],System.Int64)">
            <summary>
            Read byte array diff into an optional buffer from the stream.
            </summary>
            <returns>The byte array created from the diff and original.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The length of the array if it's known. Otherwise -1</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadShortArray(System.Int16[],System.Int64)">
            <summary>
            Read short array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadShortArrayPacked(System.Int16[],System.Int64)">
            <summary>
            Read short array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadShortArrayDiff(System.Int16[],System.Int64)">
            <summary>
            Read short array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadShortArrayPackedDiff(System.Int16[],System.Int64)">
            <summary>
            Read short array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUShortArray(System.UInt16[],System.Int64)">
            <summary>
            Read ushort array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUShortArrayPacked(System.UInt16[],System.Int64)">
            <summary>
            Read ushort array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUShortArrayDiff(System.UInt16[],System.Int64)">
            <summary>
            Read ushort array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUShortArrayPackedDiff(System.UInt16[],System.Int64)">
            <summary>
            Read ushort array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadIntArray(System.Int32[],System.Int64)">
            <summary>
            Read int array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadIntArrayPacked(System.Int32[],System.Int64)">
            <summary>
            Read int array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadIntArrayDiff(System.Int32[],System.Int64)">
            <summary>
            Read int array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadIntArrayPackedDiff(System.Int32[],System.Int64)">
            <summary>
            Read int array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUIntArray(System.UInt32[],System.Int64)">
            <summary>
            Read uint array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUIntArrayPacked(System.UInt32[],System.Int64)">
            <summary>
            Read uint array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadUIntArrayDiff(System.UInt32[],System.Int64)">
            <summary>
            Read uint array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadLongArray(System.Int64[],System.Int64)">
            <summary>
            Read long array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadLongArrayPacked(System.Int64[],System.Int64)">
            <summary>
            Read long array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadLongArrayDiff(System.Int64[],System.Int64)">
            <summary>
            Read long array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadLongArrayPackedDiff(System.Int64[],System.Int64)">
            <summary>
            Read long array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadULongArray(System.UInt64[],System.Int64)">
            <summary>
            Read ulong array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadULongArrayPacked(System.UInt64[],System.Int64)">
            <summary>
            Read ulong array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadULongArrayDiff(System.UInt64[],System.Int64)">
            <summary>
            Read ulong array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadULongArrayPackedDiff(System.UInt64[],System.Int64)">
            <summary>
            Read ulong array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadFloatArray(System.Single[],System.Int64)">
            <summary>
            Read float array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadFloatArrayPacked(System.Single[],System.Int64)">
            <summary>
            Read float array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadFloatArrayDiff(System.Single[],System.Int64)">
            <summary>
            Read float array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadFloatArrayPackedDiff(System.Single[],System.Int64)">
            <summary>
            Read float array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDoubleArray(System.Double[],System.Int64)">
            <summary>
            Read double array from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDoubleArrayPacked(System.Double[],System.Int64)">
            <summary>
            Read double array in a packed format from the stream.
            </summary>
            <returns>The array read from the stream.</returns>
            <param name="readTo">The buffer to read into or null to create a new array</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDoubleArrayDiff(System.Double[],System.Int64)">
            <summary>
            Read double array diff from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="M:MLAPI.Serialization.BitReader.ReadDoubleArrayPackedDiff(System.Double[],System.Int64)">
            <summary>
            Read double array diff in a packed format from the stream.
            </summary>
            <returns>The array created from the diff and the current version.</returns>
            <param name="readTo">The buffer containing the old version or null.</param>
            <param name="knownLength">The known length or -1 if unknown</param>
        </member>
        <member name="T:MLAPI.Serialization.BitStream">
            <summary>
            A stream that can be used at the bit level
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.#ctor(System.Int32,System.Single)">
            <summary>
            A stream that supports writing data smaller than a single byte. This stream also has a built-in compression algorithm that can (optionally) be used to write compressed data.
            </summary>
            <param name="capacity">Initial capacity of buffer in bytes.</param>
            <param name="growthFactor">Factor by which buffer should grow when necessary.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.#ctor(System.Single)">
            <summary>
            A stream that supports writing data smaller than a single byte. This stream also has a built-in compression algorithm that can (optionally) be used to write compressed data.
            </summary>
            <param name="growthFactor">Factor by which buffer should grow when necessary.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.#ctor(System.Int32)">
            <summary>
            A stream that supports writing data smaller than a single byte. This stream also has a built-in compression algorithm that can (optionally) be used to write compressed data.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.#ctor">
            <summary>
            A stream that supports writing data smaller than a single byte. This stream also has a built-in compression algorithm that can (optionally) be used to write compressed data.
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.#ctor(System.Byte[])">
            <summary>
            A stream that supports writing data smaller than a single byte. This stream also has a built-in compression algorithm that can (optionally) be used to write compressed data.
            NOTE: when using a pre-allocated buffer, the stream will not grow!
            </summary>
            <param name="target">Pre-allocated buffer to write to</param>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.Resizable">
            <summary>
            Whether or not the stream will grow the buffer to accomodate more data.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.GrowthFactor">
            <summary>
            Factor by which buffer should grow when necessary.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.CanRead">
            <summary>
            Whether or not stream supports reading. (Always true)
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.HasDataToRead">
            <summary>
            Whether or not or there is any data to be read from the stream.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.CanSeek">
            <summary>
            Whether or not seeking is supported by this stream. (Always true)
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.CanWrite">
            <summary>
            Whether or not this stream can accept new data. NOTE: this will return true even if only fewer than 8 bits can be written!
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.Capacity">
            <summary>
            Current buffer size. The buffer will not be resized (if possible) until Position is equal to Capacity and an attempt to write data is made.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.Length">
            <summary>
            The current length of data considered to be "written" to the buffer.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.Position">
            <summary>
            The index that will be written to when any call to write data is made to this stream.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.BitPosition">
            <summary>
            Bit offset into the buffer that new data will be written to.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.BitLength">
            <summary>
            Length of data (in bits) that is considered to be written to the stream.
            </summary>
        </member>
        <member name="P:MLAPI.Serialization.BitStream.BitAligned">
            <summary>
            Whether or not the current BitPosition is evenly divisible by 8. I.e. whether or not the BitPosition is at a byte boundary.
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Flush">
            <summary>
            Flush stream. This does nothing since data is written directly to a byte buffer.
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Grow(System.Int64)">
            <summary>
            Grow buffer if possible. According to Max(bufferLength, 1) * growthFactor^Ceil(newContent/Max(bufferLength, 1))
            </summary>
            <param name="newContent">How many new values need to be accomodated (at least).</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ReadByteMisaligned">
            <summary>
            Read a misaligned byte. WARNING: If the current BitPosition <strong>isn't</strong> byte misaligned,
            avoid using this method as it <strong>may</strong> cause an IndexOutOfBoundsException in such a case.
            </summary>
            <returns>A byte extracted from up to two separate buffer indices.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ReadByteAligned">
            <summary>
            Read an aligned byte from the buffer. It's recommended to not use this when the BitPosition is byte-misaligned.
            </summary>
            <returns>The byte stored at the current Position index</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream._ReadByte">
            <summary>
            Read a byte as a byte. This is just for internal use so as to minimize casts (cuz they ugly af).
            </summary>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ReadByte">
            <summary>
            Read a byte from the buffer. This takes into account possible byte misalignment.
            </summary>
            <returns>A byte from the buffer or, if a byte can't be read, -1.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.PeekByte">
            <summary>
            Peeks a byte without advancing the position
            </summary>
            <returns>The peeked byte</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ReadBit">
            <summary>
            Read a single bit from the stream.
            </summary>
            <returns>A bit in bool format. (True represents 1, False represents 0)</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a subset of the stream buffer and write the contents to the supplied buffer.
            </summary>
            <param name="buffer">Buffer to copy data to.</param>
            <param name="offset">Offset into the buffer to write data to.</param>
            <param name="count">How many bytes to attempt to read.</param>
            <returns>Amount of bytes read.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set position in stream to read from/write to.
            </summary>
            <param name="offset">Offset from position origin.</param>
            <param name="origin">How to calculate offset.</param>
            <returns>The new position in the buffer that data will be written to.</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.SetCapacity(System.Int64)">
            <summary>
            Set the capacity of the internal buffer.
            </summary>
            <param name="value">New capacity of the buffer</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.SetLength(System.Int64)">
            <summary>
            Set length of data considered to be "written" to the stream.
            </summary>
            <param name="value">New length of the written data.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data from the given buffer to the internal stream buffer.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in given buffer to start reading from.</param>
            <param name="count">Amount of bytes to read copy from given buffer to stream buffer.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.WriteByte(System.Byte)">
            <summary>
            Write byte value to the internal stream buffer.
            </summary>
            <param name="value">The byte value to write.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream._WriteMisaligned(System.Byte)">
            <summary>
            Write a misaligned byte. NOTE: Using this when the bit position isn't byte-misaligned may cause an IndexOutOfBoundsException! This does not update the current Length of the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream._WriteIntByte(System.Int32)">
            <summary>
            Write a byte (in an int format) to the stream. This does not update the current Length of the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream._WriteULongByte(System.UInt64)">
            <summary>
            Write a byte (in a ulong format) to the stream. This does not update the current Length of the stream.
            </summary>
            <param name="byteValue">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream._WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream. This does not update the current Length of the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.Write(System.Byte[])">
            <summary>
            Write data from the given buffer to the internal stream buffer.
            </summary>
            <param name="buffer">Buffer to write from.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.WriteBit(System.Boolean)">
            <summary>
            Write a single bit to the stream
            </summary>
            <param name="bit">Value of the bit. True represents 1, False represents 0</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.CopyFrom(System.IO.Stream,System.Int32)">
            <summary>
            Copy data from another stream
            </summary>
            <param name="s">Stream to copy from</param>
            <param name="count">How many bytes to read. Set to value less than one to read until ReadByte returns -1</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.CopyTo(System.IO.Stream,System.Int32)">
            <summary>
            Copies internal buffer to stream
            </summary>
            <param name="stream">The stream to copy to</param>
            <param name="count">The maximum amount of bytes to copy. Set to value less than one to copy the full length</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.CopyUnreadFrom(System.IO.Stream,System.Int32)">
            <summary>
            Copies urnead bytes from the source stream
            </summary>
            <param name="s">The source stream to copy from</param>
            <param name="count">The max amount of bytes to copy</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.CopyFrom(MLAPI.Serialization.BitStream,System.Int32,System.Boolean)">
            <summary>
            Copys the bits from the provided BitStream
            </summary>
            <param name="stream">The stream to copy from</param>
            <param name="dataCount">The amount of data evel</param>
            <param name="copyBits">Whether or not to copy at the bit level rather than the byte level</param>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.UpdateLength">
            <summary>
            Update length of data considered to be "written" to the stream.
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.GetBuffer">
            <summary>
            Get the internal buffer being written to by this stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ToArray">
            <summary>
            Creates a copy of the internal buffer. This only contains the used bytes
            </summary>
            <returns>A copy of used bytes in the internal buffer</returns>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.PadStream">
            <summary>
            Writes zeros to fill the last byte
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.SkipPadBits">
            <summary>
            Reads zeros until the the stream is byte aligned
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitStream.ToString">
            <summary>
            Returns hex encoded version of the buffer
            </summary>
            <returns>Hex encoded version of the buffer</returns>
        </member>
        <member name="T:MLAPI.Serialization.BitWriter">
            <summary>
            A BinaryWriter that can do bit wise manipulation when backed by a BitStream
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new BitWriter backed by a given stream
            </summary>
            <param name="stream">The stream to use for writing</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.SetStream(System.IO.Stream)">
            <summary>
            Changes the underlying stream the writer is writing to
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteObjectPacked(System.Object)">
            <summary>
            Writes a boxed object in a packed format
            </summary>
            <param name="value">The object to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteSingle(System.Single)">
            <summary>
            Write single-precision floating point value to the stream
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDouble(System.Double)">
            <summary>
            Write double-precision floating point value to the stream
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteSinglePacked(System.Single)">
            <summary>
            Write single-precision floating point value to the stream as a varint
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDoublePacked(System.Double)">
            <summary>
            Write double-precision floating point value to the stream as a varint
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRay(UnityEngine.Ray)">
            <summary>
            Convenience method that writes two non-packed Vector3 from the ray to the stream
            </summary>
            <param name="ray">Ray to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRayPacked(UnityEngine.Ray)">
            <summary>
            Convenience method that writes two packed Vector3 from the ray to the stream
            </summary>
            <param name="ray">Ray to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteColor(UnityEngine.Color)">
            <summary>
            Convenience method that writes four non-varint floats from the color to the stream
            </summary>
            <param name="color">Color to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteColorPacked(UnityEngine.Color)">
            <summary>
            Convenience method that writes four varint floats from the color to the stream
            </summary>
            <param name="color">Color to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteColor32(UnityEngine.Color32)">
            <summary>
            Convenience method that writes four non-varint floats from the color to the stream
            </summary>
            <param name="color32">Color32 to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector2(UnityEngine.Vector2)">
            <summary>
            Convenience method that writes two non-varint floats from the vector to the stream
            </summary>
            <param name="vector2">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector2Packed(UnityEngine.Vector2)">
            <summary>
            Convenience method that writes two varint floats from the vector to the stream
            </summary>
            <param name="vector2">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector3(UnityEngine.Vector3)">
            <summary>
            Convenience method that writes three non-varint floats from the vector to the stream
            </summary>
            <param name="vector3">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector3Packed(UnityEngine.Vector3)">
            <summary>
            Convenience method that writes three varint floats from the vector to the stream
            </summary>
            <param name="vector3">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector4(UnityEngine.Vector4)">
            <summary>
            Convenience method that writes four non-varint floats from the vector to the stream
            </summary>
            <param name="vector4">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteVector4Packed(UnityEngine.Vector4)">
            <summary>
            Convenience method that writes four varint floats from the vector to the stream
            </summary>
            <param name="vector4">Vector to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRangedSingle(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Write a single-precision floating point value to the stream. The value is between (inclusive) the minValue and maxValue.
            </summary>
            <param name="value">Value to write</param>
            <param name="minValue">Minimum value that this value could be</param>
            <param name="maxValue">Maximum possible value that this could be</param>
            <param name="bytes">How many bytes the compressed result should occupy. Must be between 1 and 4 (inclusive)</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRangedDouble(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Write a double-precision floating point value to the stream. The value is between (inclusive) the minValue and maxValue.
            </summary>
            <param name="value">Value to write</param>
            <param name="minValue">Minimum value that this value could be</param>
            <param name="maxValue">Maximum possible value that this could be</param>
            <param name="bytes">How many bytes the compressed result should occupy. Must be between 1 and 8 (inclusive)</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRotationPacked(UnityEngine.Quaternion)">
            <summary>
            Writes the rotation to the stream.
            </summary>
            <param name="rotation">Rotation to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRotation(UnityEngine.Quaternion,System.Int32)">
            <summary>
            Writes the rotation to the stream.
            </summary>
            <param name="rotation">Rotation to write</param>
            <param name="bytesPerAngle">Unused</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteRotation(UnityEngine.Quaternion)">
            <summary>
            Writes the rotation to the stream.
            </summary>
            <param name="rotation">Rotation to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteBit(System.Boolean)">
            <summary>
            Writes a single bit
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteBool(System.Boolean)">
            <summary>
            Writes a bool as a single bit
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WritePadBits">
            <summary>
            Writes pad bits to make the underlying stream aligned
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteNibble(System.Byte)">
            <summary>
            Write the lower half (lower nibble) of a byte.
            </summary>
            <param name="value">Value containing nibble to write.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteNibble(System.Byte,System.Boolean)">
            <summary>
            Write either the upper or lower nibble of a byte to the stream.
            </summary>
            <param name="value">Value holding the nibble</param>
            <param name="upper">Whether or not the upper nibble should be written. True to write the four high bits, else writes the four low bits.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteBits(System.UInt64,System.Int32)">
            <summary>
            Write s certain amount of bits to the stream.
            </summary>
            <param name="value">Value to get bits from.</param>
            <param name="bitCount">Amount of bits to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteBits(System.Byte,System.Int32)">
            <summary>
            Write bits to stream.
            </summary>
            <param name="value">Value to get bits from.</param>
            <param name="bitCount">Amount of bits to write.</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteSByte(System.SByte)">
            <summary>
            Write a signed byte to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteChar(System.Char)">
            <summary>
            Write a single character to the stream.
            </summary>
            <param name="c">Character to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt16(System.UInt16)">
            <summary>
            Write an unsigned short (UInt16) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt16(System.Int16)">
            <summary>
            Write a signed short (Int16) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt32(System.UInt32)">
            <summary>
            Write an unsigned int (UInt32) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt32(System.Int32)">
            <summary>
            Write a signed int (Int32) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt64(System.UInt64)">
            <summary>
            Write an unsigned long (UInt64) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt64(System.Int64)">
            <summary>
            Write a signed long (Int64) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt16Packed(System.Int16)">
            <summary>
            Write a signed short (Int16) as a ZigZag encoded varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt16Packed(System.UInt16)">
            <summary>
            Write an unsigned short (UInt16) as a varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteCharPacked(System.Char)">
            <summary>
            Write a two-byte character as a varint to the stream.
            </summary>
            <param name="c">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt32Packed(System.Int32)">
            <summary>
            Write a signed int (Int32) as a ZigZag encoded varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt32Packed(System.UInt32)">
            <summary>
            Write an unsigned int (UInt32) as a varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteInt64Packed(System.Int64)">
            <summary>
            Write a signed long (Int64) as a ZigZag encoded varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUInt64Packed(System.UInt64)">
            <summary>
            Write an unsigned long (UInt64) as a varint to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteIntByte(System.Int32)">
            <summary>
            Write a byte (in an int format) to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteULongByte(System.UInt64)">
            <summary>
            Write a byte (in a ulong format) to the stream.
            </summary>
            <param name="byteValue">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
            <param name="value">Value to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteString(System.String,System.Boolean)">
            <summary>
            Writes a string
            </summary>
            <param name="s">The string to write</param>
            <param name="oneByteChars">Whether or not to use one byte per character. This will only allow ASCII</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteStringPacked(System.String)">
            <summary>
            Writes a string in a packed format
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteStringDiff(System.String,System.String,System.Boolean)">
            <summary>
            Writes the diff between two strings
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="oneByteChars">Whether or not to use single byte chars. This will only allow ASCII characters</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteStringPackedDiff(System.String,System.String)">
            <summary>
            Writes the diff between two strings in a packed format
            </summary>
            <param name="write">The new string</param>
            <param name="compare">The previous string to use for diff</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteByteArray(System.Byte[],System.Int64)">
            <summary>
            Writes a byte array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteByteArrayDiff(System.Byte[],System.Byte[],System.Int64)">
            <summary>
            Writes the diff between two byte arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteShortArray(System.Int16[],System.Int64)">
            <summary>
            Writes a short array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteShortArrayDiff(System.Int16[],System.Int16[],System.Int64)">
            <summary>
            Writes the diff between two short arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUShortArray(System.UInt16[],System.Int64)">
            <summary>
            Writes a ushort array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUShortArrayDiff(System.UInt16[],System.UInt16[],System.Int64)">
            <summary>
            Writes the diff between two ushort arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteCharArray(System.Char[],System.Int64)">
            <summary>
            Writes a char array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteCharArrayDiff(System.Char[],System.Char[],System.Int64)">
            <summary>
            Writes the diff between two char arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteIntArray(System.Int32[],System.Int64)">
            <summary>
            Writes a int array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteIntArrayDiff(System.Int32[],System.Int32[],System.Int64)">
            <summary>
            Writes the diff between two int arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUIntArray(System.UInt32[],System.Int64)">
            <summary>
            Writes a uint array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUIntArrayDiff(System.UInt32[],System.UInt32[],System.Int64)">
            <summary>
            Writes the diff between two uint arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteLongArray(System.Int64[],System.Int64)">
            <summary>
            Writes a long array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteLongArrayDiff(System.Int64[],System.Int64[],System.Int64)">
            <summary>
            Writes the diff between two long arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteULongArray(System.UInt64[],System.Int64)">
            <summary>
            Writes a ulong array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteULongArrayDiff(System.UInt64[],System.UInt64[],System.Int64)">
            <summary>
            Writes the diff between two ulong arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteFloatArray(System.Single[],System.Int64)">
            <summary>
            Writes a float array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteFloatArrayDiff(System.Single[],System.Single[],System.Int64)">
            <summary>
            Writes the diff between two float arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDoubleArray(System.Double[],System.Int64)">
            <summary>
            Writes a double array
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDoubleArrayDiff(System.Double[],System.Double[],System.Int64)">
            <summary>
            Writes the diff between two double arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteArrayPacked(System.Array,System.Int64)">
            <summary>
            Writes an array in a packed format
            </summary>
            <param name="a">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteArrayPackedDiff(System.Array,System.Array,System.Int64)">
            <summary>
            Writes the diff between two arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteShortArrayPacked(System.Int16[],System.Int64)">
            <summary>
            Writes a short array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteShortArrayPackedDiff(System.Int16[],System.Int16[],System.Int64)">
            <summary>
            Writes the diff between two short arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUShortArrayPacked(System.UInt16[],System.Int64)">
            <summary>
            Writes a ushort array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUShortArrayPackedDiff(System.UInt16[],System.UInt16[],System.Int64)">
            <summary>
            Writes the diff between two ushort arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteCharArrayPacked(System.Char[],System.Int64)">
            <summary>
            Writes a char array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteCharArrayPackedDiff(System.Char[],System.Char[],System.Int64)">
            <summary>
            Writes the diff between two char arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteIntArrayPacked(System.Int32[],System.Int64)">
            <summary>
            Writes a int array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteIntArrayPackedDiff(System.Int32[],System.Int32[],System.Int64)">
            <summary>
            Writes the diff between two int arrays
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUIntArrayPacked(System.UInt32[],System.Int64)">
            <summary>
            Writes a uint array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteUIntArrayPackedDiff(System.UInt32[],System.UInt32[],System.Int64)">
            <summary>
            Writes the diff between two uing arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteLongArrayPacked(System.Int64[],System.Int64)">
            <summary>
            Writes a long array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteLongArrayPackedDiff(System.Int64[],System.Int64[],System.Int64)">
            <summary>
            Writes the diff between two long arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteULongArrayPacked(System.UInt64[],System.Int64)">
            <summary>
            Writes a ulong array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteULongArrayPackedDiff(System.UInt64[],System.UInt64[],System.Int64)">
            <summary>
            Writes the diff between two ulong arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteFloatArrayPacked(System.Single[],System.Int64)">
            <summary>
            Writes a float array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteFloatArrayPackedDiff(System.Single[],System.Single[],System.Int64)">
            <summary>
            Writes the diff between two float arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDoubleArrayPacked(System.Double[],System.Int64)">
            <summary>
            Writes a double array in a packed format
            </summary>
            <param name="b">The array to write</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="M:MLAPI.Serialization.BitWriter.WriteDoubleArrayPackedDiff(System.Double[],System.Double[],System.Int64)">
            <summary>
            Writes the diff between two double arrays in a packed format
            </summary>
            <param name="write">The new array</param>
            <param name="compare">The previous array to use for diff</param>
            <param name="count">The amount of elements to write</param>
        </member>
        <member name="T:MLAPI.Serialization.EndianHelper">
            <summary>
            Binary helper class
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.EndianHelper.SwapEndian(System.UInt32)">
            <summary>
            Swaps the endianness of a given integer
            </summary>
            <returns>The integer with swapped endianness</returns>
            <param name="value">The integer to swap endianess</param>
        </member>
        <member name="M:MLAPI.Serialization.EndianHelper.SwapEndian(System.UInt64)">
            <summary>
            Swaps the endianness of a given integer
            </summary>
            <returns>The integer with swapped endianness</returns>
            <param name="value">The integer to swap endianess</param>
        </member>
        <member name="T:MLAPI.Serialization.IBitWritable">
            <summary>
            Interface for serializable classes and structs
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.IBitWritable.Read(System.IO.Stream)">
            <summary>
            Reads the contents from the stream and applies it to the type instance
            </summary>
            <param name="stream">The stream to read from</param>
        </member>
        <member name="M:MLAPI.Serialization.IBitWritable.Write(System.IO.Stream)">
            <summary>
            Writes the contents of the type instance to the stream
            </summary>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="T:MLAPI.Serialization.UIntFloat">
            <summary>
            A struct with a explicit memory layout. The struct has 4 fields. float,uint,double and ulong.
            Every field has the same starting point in memory. If you insert a float value, it can be extracted as a uint.
            This is to allow for lockless and garbage free conversion from float to uint and double to ulong.
            This allows for VarInt encoding and other integer encodings.
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.BitReaderPool">
            <summary>
            Static class containing PooledBitReaders
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitReaderPool.GetReader(System.IO.Stream)">
            <summary>
            Retrieves a PooledBitReader
            </summary>
            <param name="stream">The stream the reader should read from</param>
            <returns>A PooledBitReader</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitReaderPool.PutBackInPool(MLAPI.Serialization.Pooled.PooledBitReader)">
            <summary>
            Puts a PooledBitReader back into the pool
            </summary>
            <param name="reader">The reader to put in the pool</param>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.BitStreamPool">
            <summary>
            Static class containing PooledBitStreams
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitStreamPool.GetStream">
            <summary>
            Retrieves an expandable PooledBitStream from the pool
            </summary>
            <returns>An expandable PooledBitStream</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitStreamPool.PutBackInPool(MLAPI.Serialization.Pooled.PooledBitStream)">
            <summary>
            Puts a PooledBitStream back into the pool
            </summary>
            <param name="stream">The stream to put in the pool</param>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.BitWriterPool">
            <summary>
            Static class containing PooledBitWriters
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitWriterPool.GetWriter(System.IO.Stream)">
            <summary>
            Retrieves a PooledBitWriter
            </summary>
            <param name="stream">The stream the writer should write to</param>
            <returns>A PooledBitWriter</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.BitWriterPool.PutBackInPool(MLAPI.Serialization.Pooled.PooledBitWriter)">
            <summary>
            Puts a PooledBitWriter back into the pool
            </summary>
            <param name="writer">The writer to put in the pool</param>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.PooledBitReader">
            <summary>
            Disposable BitReader that returns the Reader to the BitReaderPool when disposed
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitReader.Get(System.IO.Stream)">
            <summary>
            Gets a PooledBitReader from the static BitReaderPool
            </summary>
            <returns>PooledBitReader</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitReader.Dispose">
            <summary>
            Returns the PooledBitReader into the static BitReaderPool
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.PooledBitStream">
            <summary>
            Disposable BitStream that returns the Stream to the BitStreamPool when disposed
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitStream.Get">
            <summary>
            Gets a PooledBitStream from the static BitStreamPool
            </summary>
            <returns>PooledBitStream</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitStream.Dispose">
            <summary>
            Returns the PooledBitStream into the static BitStreamPool
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.Pooled.PooledBitWriter">
            <summary>
            Disposable BitWriter that returns the Writer to the BitWriterPool when disposed
            </summary>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitWriter.Get(System.IO.Stream)">
            <summary>
            Gets a PooledBitWriter from the static BitWriterPool
            </summary>
            <returns>PooledBitWriter</returns>
        </member>
        <member name="M:MLAPI.Serialization.Pooled.PooledBitWriter.Dispose">
            <summary>
            Returns the PooledBitWriter into the static BitWriterPool
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.SerializationManager">
            <summary>
            Helper class to manage the MLAPI serialization.
            </summary>
        </member>
        <member name="T:MLAPI.Serialization.SerializationManager.CustomDeserializationDelegate`1">
            <summary>
            The delegate used when registering custom deserialization for a type.
            </summary>
            <param name="stream">The stream to read the data required to construct the type.</param>
            <typeparam name="T">The type to deserialize.</typeparam>
        </member>
        <member name="T:MLAPI.Serialization.SerializationManager.CustomSerializationDelegate`1">
            <summary>
            The delegate used when registering custom serialization for a type.
            </summary>
            <param name="stream">The stream to write data to that is required to reconstruct the type in the deserialization delegate.</param>
            <param name="instance">The instance to serialize to the stream.</param>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:MLAPI.Serialization.SerializationManager.RegisterSerializationHandlers``1(MLAPI.Serialization.SerializationManager.CustomSerializationDelegate{``0},MLAPI.Serialization.SerializationManager.CustomDeserializationDelegate{``0})">
            <summary>
            Registers a custom serialization and deserialization pair for a object.
            This is useful for writing objects that are behind the third party wall. Such as .NET types.
            </summary>
            <param name="onSerialize">The delegate to invoke to serialize the type.</param>
            <param name="onDeserialize">The delegate to invoke to deserialize the type.</param>
            <typeparam name="T">The type to register.</typeparam>
        </member>
        <member name="M:MLAPI.Serialization.SerializationManager.RemoveSerializationHandlers``1">
            <summary>
            Removes a serialization handler that was registered previously for a specific type.
            This will remove both the serialization and deserialization handler.
            </summary>
            <typeparam name="T">The type for the serialization handlers to remove.</typeparam>
            <returns>Whether or not either the serialization or deserialization handlers for the type was removed.</returns>
        </member>
        <member name="M:MLAPI.Serialization.SerializationManager.IsTypeSupported(System.Type)">
            <summary>
            Returns if a type is supported for serialization
            </summary>
            <param name="type">The type to check</param>
            <returns>Whether or not the type is supported</returns>
        </member>
        <member name="T:MLAPI.Spawning.SpawnManager">
            <summary>
            Class that handles object spawning
            </summary>
        </member>
        <member name="F:MLAPI.Spawning.SpawnManager.SpawnedObjects">
            <summary>
            The currently spawned objects
            </summary>
        </member>
        <member name="F:MLAPI.Spawning.SpawnManager.SpawnedObjectsList">
            <summary>
            A list of the spawned objects
            </summary>
        </member>
        <member name="T:MLAPI.Spawning.SpawnManager.SpawnHandlerDelegate">
            <summary>
            The delegate used when spawning a networked object
            </summary>
            <param name="position">The position to spawn the object at</param>
            <param name="rotation">The rotation to spawn the object with</param>
        </member>
        <member name="T:MLAPI.Spawning.SpawnManager.DestroyHandlerDelegate">
            <summary>
            The delegate used when destroying networked objects
            </summary>
            <param name="networkedObject">The networked object to be destroy</param>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.RegisterSpawnHandler(System.UInt64,MLAPI.Spawning.SpawnManager.SpawnHandlerDelegate)">
            <summary>
            Registers a delegate for spawning networked prefabs, useful for object pooling
            </summary>
            <param name="prefabHash">The prefab hash to spawn</param>
            <param name="handler">The delegate handler</param>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.RegisterCustomDestroyHandler(System.UInt64,MLAPI.Spawning.SpawnManager.DestroyHandlerDelegate)">
            <summary>
            Registers a delegate for destroying networked objects, useful for object pooling
            </summary>
            <param name="prefabHash">The prefab hash to destroy</param>
            <param name="handler">The delegate handler</param>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.RemoveCustomSpawnHandler(System.UInt64)">
            <summary>
            Removes the custom spawn handler for a specific prefab hash
            </summary>
            <param name="prefabHash">The prefab hash of the prefab spawn handler that is to be removed</param>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.RemoveCustomDestroyHandler(System.UInt64)">
            <summary>
            Removes the custom destroy handler for a specific prefab hash
            </summary>
            <param name="prefabHash">The prefab hash of the prefab destroy handler that is to be removed</param>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.GetNetworkedPrefabIndexOfHash(System.UInt64)">
            <summary>
            Gets the prefab index of a given prefab hash
            </summary>
            <param name="hash">The hash of the prefab</param>
            <returns>The index of the prefab</returns>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.GetPrefabHashFromIndex(System.Int32)">
            <summary>
            Returns the prefab hash for the networked prefab with a given index
            </summary>
            <param name="index">The networked prefab index</param>
            <returns>The prefab hash for the given prefab index</returns>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.GetPrefabHashFromGenerator(System.String)">
            <summary>
            Returns the prefab hash for a given prefab hash generator
            </summary>
            <param name="generator">The prefab hash generator</param>
            <returns>The hash for the given generator</returns>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.GetLocalPlayerObject">
            <summary>
            Returns the local player object or null if one does not exist
            </summary>
            <returns>The local player object or null if one does not exist</returns>
        </member>
        <member name="M:MLAPI.Spawning.SpawnManager.GetPlayerObject(System.UInt64)">
            <summary>
            Returns the player object with a given clientId or null if one does not exist
            </summary>
            <returns>The player object with a given clientId or null if one does not exist</returns>
        </member>
        <member name="T:MLAPI.Transports.ChannelType">
            <summary>
            Delivery methods
            </summary>
        </member>
        <member name="F:MLAPI.Transports.ChannelType.Unreliable">
            <summary>
            Unreliable message
            </summary>
        </member>
        <member name="F:MLAPI.Transports.ChannelType.UnreliableSequenced">
            <summary>
            Unreliable with sequencing
            </summary>
        </member>
        <member name="F:MLAPI.Transports.ChannelType.Reliable">
            <summary>
            Reliable message
            </summary>
        </member>
        <member name="F:MLAPI.Transports.ChannelType.ReliableSequenced">
            <summary>
            Reliable message where messages are guaranteed to be in the right order
            </summary>
        </member>
        <member name="F:MLAPI.Transports.ChannelType.ReliableFragmentedSequenced">
            <summary>
            A reliable message with guaranteed order with fragmentation support
            </summary>
        </member>
        <member name="T:MLAPI.Transports.Multiplex.MultiplexTransportAdapter">
            <summary>
            Multiplex transport adapter.
            </summary>
        </member>
        <member name="T:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod">
            <summary>
            The method to use to distribute the transport connectionIds in a fixed size 64 bit integer.
            </summary>
        </member>
        <member name="F:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod.MakeRoomLastBits">
            <summary>
            Drops the first few bits (left side) by shifting the transport clientId to the left and inserting the transportId in the first bits.
            Ensure that ALL transports dont use the last bits in their produced clientId.
            For incremental clientIds, this is the most space efficient assuming that every transport get used an equal amount.
            </summary>
        </member>
        <member name="F:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod.ReplaceFirstBits">
            <summary>
            Drops the first few bits (left side) and replaces them with the transport index.
            Ensure that ALL transports dont use the first few bits in the produced clientId.
            </summary>
        </member>
        <member name="F:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod.ReplaceLastBits">
            <summary>
            Drops the last few bits (right side) and replaces them with the transport index.
            Ensure that ALL transports dont use the last bits in their produced clientId.
            This option is for advanced users and will not work with the official MLAPI transports as they use the last bits.
            </summary>
        </member>
        <member name="F:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod.MakeRoomFirstBits">
            <summary>
            Drops the last few bits (right side) by shifting the transport clientId to the right and inserting the transportId in the first bits.
            Ensure that ALL transports dont use the first bits in their produced clientId.
            </summary>
        </member>
        <member name="F:MLAPI.Transports.Multiplex.MultiplexTransportAdapter.ConnectionIdSpreadMethod.Spread">
            <summary>
            Spreads the clientIds evenly among the transports.
            </summary>
        </member>
        <member name="T:MLAPI.Transports.NetEventType">
            <summary>
            Represents a netEvent when polling
            </summary>
        </member>
        <member name="F:MLAPI.Transports.NetEventType.Data">
            <summary>
            New data is received
            </summary>
        </member>
        <member name="F:MLAPI.Transports.NetEventType.Connect">
            <summary>
            A client is connected, or client connected to server
            </summary>
        </member>
        <member name="F:MLAPI.Transports.NetEventType.Disconnect">
            <summary>
            A client disconnected, or client disconnected from server
            </summary>
        </member>
        <member name="F:MLAPI.Transports.NetEventType.Nothing">
            <summary>
            No new event
            </summary>
        </member>
        <member name="T:MLAPI.Transports.Tasks.SocketTasks">
            <summary>
            Represents one or more socket tasks.
            </summary>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTasks.Tasks">
            <summary>
            Gets or sets the underlying SocketTasks.
            </summary>
            <value>The tasks.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTasks.IsDone">
            <summary>
            Gets a value indicating whether this all tasks is done.
            </summary>
            <value><c>true</c> if is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTasks.Success">
            <summary>
            Gets a value indicating whether all tasks were sucessful.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTasks.AnySuccess">
            <summary>
            Gets a value indicating whether any tasks were successful.
            </summary>
            <value><c>true</c> if any success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTasks.AnyDone">
            <summary>
            Gets a value indicating whether any tasks are done.
            </summary>
            <value><c>true</c> if any done; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MLAPI.Transports.Tasks.SocketTask">
            <summary>
            A single socket task.
            </summary>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.IsDone">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MLAPI.Transports.Tasks.SocketTask"/> is done.
            </summary>
            <value><c>true</c> if is done; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MLAPI.Transports.Tasks.SocketTask"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.TransportException">
            <summary>
            Gets or sets the transport exception.
            </summary>
            <value>The transport exception.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.SocketError">
            <summary>
            Gets or sets the socket error.
            </summary>
            <value>The socket error.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.TransportCode">
            <summary>
            Gets or sets the transport code.
            </summary>
            <value>The transport code.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.Done">
            <summary>
            Gets a done task.
            </summary>
            <value>The done.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.Fault">
            <summary>
            Gets a faulty task.
            </summary>
            <value>The fault.</value>
        </member>
        <member name="P:MLAPI.Transports.Tasks.SocketTask.Working">
            <summary>
            Gets a working task.
            </summary>
            <value>The working.</value>
        </member>
        <member name="M:MLAPI.Transports.Tasks.SocketTask.AsTasks">
            <summary>
            Converts to a SocketTasks.
            </summary>
            <returns>The tasks.</returns>
        </member>
        <member name="T:MLAPI.Transports.Transport">
            <summary>
            A network transport
            </summary>
        </member>
        <member name="T:MLAPI.Transports.Transport.RequestChannelsDelegate">
            <summary>
            Delegate used to request channels on the underlying transport.
            </summary>
        </member>
        <member name="E:MLAPI.Transports.Transport.OnChannelRegistration">
            <summary>
            Delegate called when the transport wants to know what channels to register.
            </summary>
        </member>
        <member name="P:MLAPI.Transports.Transport.ServerClientId">
            <summary>
            A constant clientId that represents the server.
            When this value is found in methods such as Send, it should be treated as a placeholder that means "the server"
            </summary>
        </member>
        <member name="P:MLAPI.Transports.Transport.IsSupported">
            <summary>
            Gets a value indicating whether this <see cref="T:MLAPI.Transports.Transport"/> is supported in the current runtime context.
            This is used by multiplex adapters.
            </summary>
            <value><c>true</c> if is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:MLAPI.Transports.Transport.MLAPI_INTERNAL_CHANNELS">
            <summary>
            The channels the MLAPI will use when sending internal messages.
            </summary>
        </member>
        <member name="T:MLAPI.Transports.Transport.TransportEventDelegate">
            <summary>
            Delegate for transport events.
            </summary>
        </member>
        <member name="E:MLAPI.Transports.Transport.OnTransportEvent">
            <summary>
            Occurs when the transport has a new transport event. Can be used to make an event based transport instead of a poll based.
            Invokation has to occur on the Unity thread in the Update loop.
            </summary>
        </member>
        <member name="M:MLAPI.Transports.Transport.Send(System.UInt64,System.ArraySegment{System.Byte},System.String)">
            <summary>
            Send a payload to the specified clientId, data and channelName.
            </summary>
            <param name="clientId">The clientId to send to</param>
            <param name="data">The data to send</param>
            <param name="channelName">The channel to send data to</param>
        </member>
        <member name="M:MLAPI.Transports.Transport.PollEvent(System.UInt64@,System.String@,System.ArraySegment{System.Byte}@,System.Single@)">
            <summary>
            Polls for incoming events, with an extra output parameter to report the precise time the event was received.
            </summary>
            <param name="clientId">The clientId this event is for</param>
            <param name="channelName">The channel the data arrived at. This is usually used when responding to things like RPCs</param>
            <param name="payload">The incoming data payload</param>
            <param name="receiveTime">The time the event was received, as reported by Time.realtimeSinceStartup.</param>
            <returns>Returns the event type</returns>
        </member>
        <member name="M:MLAPI.Transports.Transport.StartClient">
            <summary>
            Connects client to server
            </summary>
        </member>
        <member name="M:MLAPI.Transports.Transport.StartServer">
            <summary>
            Starts to listen for incoming clients.
            </summary>
        </member>
        <member name="M:MLAPI.Transports.Transport.DisconnectRemoteClient(System.UInt64)">
            <summary>
            Disconnects a client from the server
            </summary>
            <param name="clientId">The clientId to disconnect</param>
        </member>
        <member name="M:MLAPI.Transports.Transport.DisconnectLocalClient">
            <summary>
            Disconnects the local client from the server
            </summary>
        </member>
        <member name="M:MLAPI.Transports.Transport.GetCurrentRtt(System.UInt64)">
            <summary>
            Gets the round trip time for a specific client. This method is optional
            </summary>
            <param name="clientId">The clientId to get the rtt from</param>
            <returns>Returns the round trip time in milliseconds </returns>
        </member>
        <member name="M:MLAPI.Transports.Transport.Shutdown">
            <summary>
            Shuts down the transport
            </summary>
        </member>
        <member name="M:MLAPI.Transports.Transport.Init">
            <summary>
            Initializes the transport
            </summary>
        </member>
        <member name="T:MLAPI.Transports.TransportChannel">
            <summary>
            A transport channel used by the MLAPI
            </summary>
        </member>
        <member name="F:MLAPI.Transports.TransportChannel.Name">
            <summary>
            The name of the channel
            </summary>
        </member>
        <member name="F:MLAPI.Transports.TransportChannel.Type">
            <summary>
            The type of channel
            </summary>
        </member>
        <member name="T:MLAPI.Transports.UnetChannel">
            <summary>
            A transport channel used by the MLAPI
            </summary>
        </member>
        <member name="F:MLAPI.Transports.UnetChannel.Name">
            <summary>
            The name of the channel
            </summary>
        </member>
        <member name="F:MLAPI.Transports.UnetChannel.Type">
            <summary>
            The type of channel
            </summary>
        </member>
    </members>
</doc>
